window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":12,"numPassedTestSuites":0,"numPassedTests":9,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":21,"startTime":1753287642919,"success":false,"testResults":[{"numFailingTests":12,"numPassingTests":9,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1753287645902,"runtime":2967,"slow":false,"start":1753287642935},"testFilePath":"/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › GET /api/db-status - 数据库状态检查 › Happy Path - 正常数据库状态\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 74 |\u001b[39m         \u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'/api/db-status'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 75 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 76 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 77 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39msuccess)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 78 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'database'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 79 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdatabase)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'name'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:76:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › GET /api/db-status - 数据库状态检查 › Edge Case - 验证数据库名称\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 101 |\u001b[39m         \u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'/api/db-status'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 102 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 103 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 104 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdatabase\u001b[33m.\u001b[39mname)\u001b[33m.\u001b[39mtoMatch(\u001b[35m/task_manager.*db/\u001b[39m)\u001b[33m;\u001b[39m \u001b[90m// 匹配测试或生产数据库名\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 105 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 106 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:103:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › GET /api/db-status - 数据库状态检查 › Happy Path - 验证学生数量准确性\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 |\u001b[39m         \u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'/api/db-status'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 114 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 115 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 116 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdatabase\u001b[33m.\u001b[39mstudentCount)\u001b[33m.\u001b[39mtoBe(actualCount)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 117 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 118 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:115:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库连接功能测试 › Happy Path - 数据库查询功能\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mArray\u001b[39m\n    Received constructor: \u001b[31mArray\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 126 |\u001b[39m     test(\u001b[32m'Happy Path - 数据库查询功能'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 127 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m query(\u001b[32m'SELECT 1 as test'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 128 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mArray\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 129 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 130 |\u001b[39m       expect(result[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mtest)\u001b[33m.\u001b[39mtoBe(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 131 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeInstanceOf (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:128:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库连接功能测试 › Happy Path - 数据库事务功能\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"测试回滚\"\u001b[39m\n    Received: \u001b[31m\"connection.execute is not a function\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 157 |\u001b[39m         \u001b[36mconst\u001b[39m afterRollback \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m query(\u001b[32m'SELECT * FROM students WHERE id = ?'\u001b[39m\u001b[33m,\u001b[39m [\u001b[32m'TEST_TRANS'\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 158 |\u001b[39m         expect(afterRollback)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 159 |\u001b[39m         expect(error\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoBe(\u001b[32m'测试回滚'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 160 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 161 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 162 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:159:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库连接功能测试 › Edge Case - 空查询参数\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mArray\u001b[39m\n    Received constructor: \u001b[31mArray\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 167 |\u001b[39m     test(\u001b[32m'Edge Case - 空查询参数'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 168 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m query(\u001b[32m'SELECT COUNT(*) as count FROM students WHERE id = ?'\u001b[39m\u001b[33m,\u001b[39m [\u001b[32m''\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 169 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mArray\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 170 |\u001b[39m       expect(result[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mcount)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 171 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 172 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeInstanceOf (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:169:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库连接功能测试 › Edge Case - NULL参数查询\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mArray\u001b[39m\n    Received constructor: \u001b[31mArray\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 173 |\u001b[39m     test(\u001b[32m'Edge Case - NULL参数查询'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 174 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m query(\u001b[32m'SELECT COUNT(*) as count FROM students WHERE id = ?'\u001b[39m\u001b[33m,\u001b[39m [\u001b[36mnull\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 175 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mArray\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 176 |\u001b[39m       expect(result[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mcount)\u001b[33m.\u001b[39mtoBe(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeInstanceOf (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:175:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库连接功能测试 › Happy Path - 批量查询性能\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected constructor: \u001b[32mArray\u001b[39m\n    Received constructor: \u001b[31mArray\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 190 |\u001b[39m       expect(results)\u001b[33m.\u001b[39mtoHaveLength(\u001b[35m10\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 191 |\u001b[39m       results\u001b[33m.\u001b[39mforEach(result \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 192 |\u001b[39m         expect(result)\u001b[33m.\u001b[39mtoBeInstanceOf(\u001b[33mArray\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 193 |\u001b[39m         expect(result[\u001b[35m0\u001b[39m])\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'count'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 194 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 195 |\u001b[39m       \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat toBeInstanceOf (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:192:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.forEach (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:191:15)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库表结构验证 › Happy Path - 验证students表结构\u001b[39m\u001b[22m\n\n    SQLITE_ERROR: near \"DESCRIBE\": syntax error\n\u001b[2m\u001b[22m\n\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库表结构验证 › Happy Path - 验证tasks表结构\u001b[39m\u001b[22m\n\n    SQLITE_ERROR: near \"DESCRIBE\": syntax error\n\u001b[2m\u001b[22m\n\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库性能和稳定性测试 › Edge Case - 大量数据查询\u001b[39m\u001b[22m\n\n    SQLITE_ERROR: no such table: student_profiles\n    --> in Database#all('SELECT COUNT(*) as count FROM student_profiles', [], [Function (anonymous)])\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 149 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 150 |\u001b[39m     \u001b[36mif\u001b[39m (isSelect) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 151 |\u001b[39m       database\u001b[33m.\u001b[39mall(sql\u001b[33m,\u001b[39m params\u001b[33m,\u001b[39m (err\u001b[33m,\u001b[39m rows) \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 152 |\u001b[39m         \u001b[36mif\u001b[39m (err) {\u001b[22m\n\u001b[2m     \u001b[90m 153 |\u001b[39m           console\u001b[33m.\u001b[39merror(\u001b[32m'数据库查询错误:'\u001b[39m\u001b[33m,\u001b[39m err)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 154 |\u001b[39m           reject(err)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat all (\u001b[22m\u001b[2mconfig/database.js\u001b[2m:151:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat query (\u001b[22m\u001b[2mconfig/database.js\u001b[2m:144:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat query (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:251:44)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.map (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.map (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:251:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1m数据库连接和健康检查模块测试 › 数据库性能和稳定性测试 › Edge Case - 连接池压力测试\u001b[39m\u001b[22m\n\n    SQLITE_ERROR: no such function: SLEEP\n    --> in Database#all('SELECT SLEEP(0.1), ? as query_id', [ 0 ], [Function (anonymous)])\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 149 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 150 |\u001b[39m     \u001b[36mif\u001b[39m (isSelect) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 151 |\u001b[39m       database\u001b[33m.\u001b[39mall(sql\u001b[33m,\u001b[39m params\u001b[33m,\u001b[39m (err\u001b[33m,\u001b[39m rows) \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 152 |\u001b[39m         \u001b[36mif\u001b[39m (err) {\u001b[22m\n\u001b[2m     \u001b[90m 153 |\u001b[39m           console\u001b[33m.\u001b[39merror(\u001b[32m'数据库查询错误:'\u001b[39m\u001b[33m,\u001b[39m err)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 154 |\u001b[39m           reject(err)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat all (\u001b[22m\u001b[2mconfig/database.js\u001b[2m:151:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat query (\u001b[22m\u001b[2mconfig/database.js\u001b[2m:144:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.query (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/database.test.js\u001b[39m\u001b[0m\u001b[2m:265:23)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["数据库连接和健康检查模块测试","GET /health - 健康检查接口"],"duration":116,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 GET /health - 健康检查接口 Happy Path - 正常健康检查","status":"passed","title":"Happy Path - 正常健康检查"},{"ancestorTitles":["数据库连接和健康检查模块测试","GET /health - 健康检查接口"],"duration":117,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 GET /health - 健康检查接口 Edge Case - 多次连续健康检查","status":"passed","title":"Edge Case - 多次连续健康检查"},{"ancestorTitles":["数据库连接和健康检查模块测试","GET /health - 健康检查接口"],"duration":108,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 GET /health - 健康检查接口 Happy Path - 响应时间检查","status":"passed","title":"Happy Path - 响应时间检查"},{"ancestorTitles":["数据库连接和健康检查模块测试","GET /health - 健康检查接口"],"duration":104,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 GET /health - 健康检查接口 Edge Case - 验证时间戳格式","status":"passed","title":"Edge Case - 验证时间戳格式"},{"ancestorTitles":["数据库连接和健康检查模块测试","GET /api/db-status - 数据库状态检查"],"duration":114,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:76:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"数据库连接和健康检查模块测试 GET /api/db-status - 数据库状态检查 Happy Path - 正常数据库状态","status":"failed","title":"Happy Path - 正常数据库状态"},{"ancestorTitles":["数据库连接和健康检查模块测试","GET /api/db-status - 数据库状态检查"],"duration":106,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:103:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"数据库连接和健康检查模块测试 GET /api/db-status - 数据库状态检查 Edge Case - 验证数据库名称","status":"failed","title":"Edge Case - 验证数据库名称"},{"ancestorTitles":["数据库连接和健康检查模块测试","GET /api/db-status - 数据库状态检查"],"duration":107,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.toBe (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:115:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"数据库连接和健康检查模块测试 GET /api/db-status - 数据库状态检查 Happy Path - 验证学生数量准确性","status":"failed","title":"Happy Path - 验证学生数量准确性"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库连接功能测试"],"duration":103,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 数据库连接功能测试 Happy Path - 直接数据库连接测试","status":"passed","title":"Happy Path - 直接数据库连接测试"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库连接功能测试"],"duration":103,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mArray\u001b[39m\nReceived constructor: \u001b[31mArray\u001b[39m\n\n    at Object.toBeInstanceOf (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:128:22)"],"fullName":"数据库连接和健康检查模块测试 数据库连接功能测试 Happy Path - 数据库查询功能","status":"failed","title":"Happy Path - 数据库查询功能"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库连接功能测试"],"duration":103,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"测试回滚\"\u001b[39m\nReceived: \u001b[31m\"connection.execute is not a function\"\u001b[39m\n    at Object.toBe (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:159:31)"],"fullName":"数据库连接和健康检查模块测试 数据库连接功能测试 Happy Path - 数据库事务功能","status":"failed","title":"Happy Path - 数据库事务功能"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库连接功能测试"],"duration":105,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 数据库连接功能测试 Error Handling - 无效SQL查询","status":"passed","title":"Error Handling - 无效SQL查询"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库连接功能测试"],"duration":111,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mArray\u001b[39m\nReceived constructor: \u001b[31mArray\u001b[39m\n\n    at Object.toBeInstanceOf (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:169:22)"],"fullName":"数据库连接和健康检查模块测试 数据库连接功能测试 Edge Case - 空查询参数","status":"failed","title":"Edge Case - 空查询参数"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库连接功能测试"],"duration":102,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mArray\u001b[39m\nReceived constructor: \u001b[31mArray\u001b[39m\n\n    at Object.toBeInstanceOf (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:175:22)"],"fullName":"数据库连接和健康检查模块测试 数据库连接功能测试 Edge Case - NULL参数查询","status":"failed","title":"Edge Case - NULL参数查询"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库连接功能测试"],"duration":103,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeInstanceOf\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected constructor: \u001b[32mArray\u001b[39m\nReceived constructor: \u001b[31mArray\u001b[39m\n\n    at toBeInstanceOf (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:192:24)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:191:15)"],"fullName":"数据库连接和健康检查模块测试 数据库连接功能测试 Happy Path - 批量查询性能","status":"failed","title":"Happy Path - 批量查询性能"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库表结构验证"],"duration":103,"failureMessages":["Error: SQLITE_ERROR: near \"DESCRIBE\": syntax error"],"fullName":"数据库连接和健康检查模块测试 数据库表结构验证 Happy Path - 验证students表结构","status":"failed","title":"Happy Path - 验证students表结构"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库表结构验证"],"duration":107,"failureMessages":["Error: SQLITE_ERROR: near \"DESCRIBE\": syntax error"],"fullName":"数据库连接和健康检查模块测试 数据库表结构验证 Happy Path - 验证tasks表结构","status":"failed","title":"Happy Path - 验证tasks表结构"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库表结构验证"],"duration":108,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 数据库表结构验证 Happy Path - 验证外键约束","status":"passed","title":"Happy Path - 验证外键约束"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库表结构验证"],"duration":105,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 数据库表结构验证 Happy Path - 验证唯一约束","status":"passed","title":"Happy Path - 验证唯一约束"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库性能和稳定性测试"],"duration":103,"failureMessages":["Error: SQLITE_ERROR: no such table: student_profiles\n--> in Database#all('SELECT COUNT(*) as count FROM student_profiles', [], [Function (anonymous)])\n    at all (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/config/database.js:151:16)\n    at new Promise (<anonymous>)\n    at query (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/config/database.js:144:10)\n    at query (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:251:44)\n    at Array.map (<anonymous>)\n    at Object.map (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:251:31)\n    at Promise.then.completed (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"数据库连接和健康检查模块测试 数据库性能和稳定性测试 Edge Case - 大量数据查询","status":"failed","title":"Edge Case - 大量数据查询"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库性能和稳定性测试"],"duration":105,"failureMessages":["Error: SQLITE_ERROR: no such function: SLEEP\n--> in Database#all('SELECT SLEEP(0.1), ? as query_id', [ 0 ], [Function (anonymous)])\n    at all (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/config/database.js:151:16)\n    at new Promise (<anonymous>)\n    at query (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/config/database.js:144:10)\n    at Object.query (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/tests/database.test.js:265:23)\n    at Promise.then.completed (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"数据库连接和健康检查模块测试 数据库性能和稳定性测试 Edge Case - 连接池压力测试","status":"failed","title":"Edge Case - 连接池压力测试"},{"ancestorTitles":["数据库连接和健康检查模块测试","数据库性能和稳定性测试"],"duration":219,"failureMessages":[],"fullName":"数据库连接和健康检查模块测试 数据库性能和稳定性测试 Happy Path - 数据库连接恢复测试","status":"passed","title":"Happy Path - 数据库连接恢复测试"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":true,"collectCoverageFrom":["routes/**/*.js","middleware/**/*.js","config/**/*.js","scripts/**/*.js","server.js","!**/node_modules/**","!**/tests/**","!**/coverage/**"],"coverageDirectory":"/Users/danieldong/Documents/GitHub/gougegaoshu/backend/coverage","coverageProvider":"babel","coverageReporters":["text","text-summary","html","lcov","json"],"coverageThreshold":{"global":{"branches":70,"functions":70,"lines":70,"statements":70}},"detectLeaks":false,"detectOpenHandles":true,"errorOnDeprecated":true,"expand":false,"findRelatedTests":false,"forceExit":true,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":15,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/jest-html-reporters/index.js",{"publicPath":"./coverage","filename":"test-report.html","expand":true,"hideIcon":false,"pageTitle":"任务管理系统测试报告","inlineSource":false}]],"rootDir":"/Users/danieldong/Documents/GitHub/gougegaoshu/backend","runTestsByPath":false,"seed":-854934995,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"database.test.js","testSequencer":"/Users/danieldong/Documents/GitHub/gougegaoshu/backend/node_modules/@jest/test-sequencer/build/index.js","testTimeout":30000,"updateSnapshot":"new","useStderr":false,"verbose":true,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false,"coverageLinkPath":"lcov-report/index.html"},"endTime":1753287645909,"_reporterOptions":{"publicPath":"./coverage","filename":"test-report.html","expand":true,"pageTitle":"任务管理系统测试报告","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})