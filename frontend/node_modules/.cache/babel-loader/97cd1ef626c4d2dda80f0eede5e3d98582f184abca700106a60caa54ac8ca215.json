{"ast":null,"code":"var _jsxFileName = \"/Users/danieldong/Documents/GitHub/gougegaoshu/frontend/src/contexts/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI, taskAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\n// 初始状态\nconst initialDate = new Date();\nconst savedSystemDate = localStorage.getItem('systemDate');\nconst currentSystemDate = savedSystemDate ? new Date(savedSystemDate) : new Date(initialDate);\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  systemDate: currentSystemDate,\n  initialDate: new Date(initialDate)\n};\n\n// Action类型\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  LOGOUT: 'LOGOUT',\n  SET_SYSTEM_DATE: 'SET_SYSTEM_DATE'\n};\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case actionTypes.SET_USER:\n      console.log('🔄 Reducer SET_USER 执行:', {\n        payload: action.payload,\n        isAuthenticated: !!action.payload\n      });\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload,\n        loading: false,\n        error: null\n      };\n    case actionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case actionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false\n      };\n    case actionTypes.SET_SYSTEM_DATE:\n      return {\n        ...state,\n        systemDate: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Context Provider\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // 初始化时检查token\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      if (token && savedUser) {\n        try {\n          // 验证token是否有效\n          const response = await authAPI.verify();\n          if (response.success) {\n            dispatch({\n              type: actionTypes.SET_USER,\n              payload: JSON.parse(savedUser)\n            });\n          } else {\n            // token无效，清除本地存储\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({\n              type: actionTypes.LOGOUT\n            });\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: actionTypes.LOGOUT\n          });\n        }\n      } else {\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    initAuth();\n  }, []);\n\n  // 登录\n  const login = async (studentId, password, rememberMe = false) => {\n    try {\n      console.log(`🔐 AppContext login 开始: ${studentId}`);\n      dispatch({\n        type: actionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: actionTypes.SET_ERROR,\n        payload: null\n      });\n\n      // 判断是管理员还是学生登录\n      const isAdmin = studentId.toUpperCase().startsWith('ADMIN');\n      const loginEndpoint = isAdmin ? '/api/auth/admin/login' : '/api/auth/login';\n      console.log(`🌐 使用 axios 调用${isAdmin ? '管理员' : '学生'}登录接口: ${loginEndpoint}`);\n      const {\n        data: response\n      } = await axios.post(loginEndpoint, {\n        studentId,\n        password\n      });\n      console.log(`📨 API 响应:`, response);\n      if (response.success) {\n        // 根据登录类型获取用户信息\n        const userData = isAdmin ? response.data.admin : response.data.student;\n        const {\n          token\n        } = response.data;\n        console.log(`👤 用户信息:`, userData);\n        console.log(`🔑 Token:`, token);\n\n        // 保存到localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        console.log(`💾 用户信息已保存到 localStorage`);\n        console.log(`💾 localStorage token:`, localStorage.getItem('token'));\n        console.log(`💾 localStorage user:`, localStorage.getItem('user'));\n        if (rememberMe) {\n          localStorage.setItem('savedCredentials', JSON.stringify({\n            studentId,\n            password\n          }));\n        } else {\n          localStorage.removeItem('savedCredentials');\n        }\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: userData\n        });\n        console.log(`✅ 登录成功，用户状态已更新: ${userData.id}`);\n        console.log(`🔄 Dispatch SET_USER 完成`);\n        console.log(`🔍 用户数据:`, userData);\n        console.log(`🔍 即将返回登录结果...`);\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        console.error(`❌ API 返回登录失败: ${response.message}`);\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      console.error(`❌ 登录异常:`, error);\n      dispatch({\n        type: actionTypes.SET_ERROR,\n        payload: error.message\n      });\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 登出\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: actionTypes.LOGOUT\n    });\n  };\n\n  // 修改密码\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(oldPassword, newPassword);\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 刷新认证状态\n  const refreshAuth = async () => {\n    const token = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n    if (token && savedUser) {\n      try {\n        // 验证token是否有效\n        const response = await authAPI.verify();\n        if (response.success) {\n          dispatch({\n            type: actionTypes.SET_USER,\n            payload: JSON.parse(savedUser)\n          });\n          return true;\n        } else {\n          // token无效，清除本地存储\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: actionTypes.LOGOUT\n          });\n          return false;\n        }\n      } catch (error) {\n        console.error('Token验证失败:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        dispatch({\n          type: actionTypes.LOGOUT\n        });\n        return false;\n      }\n    } else {\n      dispatch({\n        type: actionTypes.SET_LOADING,\n        payload: false\n      });\n      return false;\n    }\n  };\n\n  // 设置系统日期（用于模拟）\n  const setSystemDate = date => {\n    localStorage.setItem('systemDate', date.toISOString());\n    dispatch({\n      type: actionTypes.SET_SYSTEM_DATE,\n      payload: date\n    });\n  };\n\n  // 进入下一天（模拟功能）\n  const advanceDay = async () => {\n    try {\n      const currentDate = new Date(state.systemDate);\n      const nextDay = new Date(currentDate);\n      nextDay.setDate(nextDay.getDate() + 1);\n      console.log(`📅 从 ${currentDate.toLocaleDateString('zh-CN')} 前进到 ${nextDay.toLocaleDateString('zh-CN')}`);\n\n      // 在切换到下一天之前，先处理当天的未完成任务\n      await processMidnightTasks(currentDate);\n\n      // 设置新日期\n      setSystemDate(nextDay);\n      console.log(`✅ 日期切换完成: ${nextDay.toLocaleDateString('zh-CN')}`);\n    } catch (error) {\n      console.error('❌ advanceDay 失败:', error);\n      throw error; // 重新抛出错误，让调用者知道失败了\n    }\n  };\n\n  // 重置到初始日期并清空所有任务数据\n  const resetToInitialDate = async () => {\n    try {\n      console.log('🔄 开始重置到初始状态...');\n\n      // 如果用户已登录，先清空任务数据\n      if (state.user) {\n        console.log('🗑️ 清空所有任务数据...');\n        const response = await taskAPI.resetToInitial();\n        if (response.success) {\n          console.log('✅ 任务数据清空成功:', response.data);\n        } else {\n          console.warn('⚠️ 任务数据清空失败:', response.message);\n        }\n      }\n\n      // 重置日期\n      console.log('📅 重置日期到初始状态...');\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n      console.log('✅ 重置完成！所有任务数据已清空，可重新导入任务');\n    } catch (error) {\n      console.error('❌ 重置失败:', error);\n      // 即使API调用失败，仍然重置日期\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n    }\n  };\n\n  // 检查是否可以设置日期（只能设置今天或未来的日期）\n  const canSetDate = targetDate => {\n    const today = new Date(state.initialDate);\n    today.setHours(0, 0, 0, 0);\n    const target = new Date(targetDate);\n    target.setHours(0, 0, 0, 0);\n    return target >= today;\n  };\n\n  // 安全设置系统日期（只允许设置今天或未来日期）\n  const setSystemDateSafely = async date => {\n    if (canSetDate(date)) {\n      const currentDate = new Date(state.systemDate);\n      const targetDate = new Date(date);\n\n      // 如果是跳跃到未来日期，需要处理中间所有日期的24:00任务\n      if (targetDate > currentDate) {\n        console.log(`🔄 跳跃日期：从 ${currentDate.toLocaleDateString('zh-CN')} 到 ${targetDate.toLocaleDateString('zh-CN')}`);\n        let processDate = new Date(currentDate);\n        while (processDate < targetDate) {\n          console.log(`🕛 处理中间日期: ${processDate.toLocaleDateString('zh-CN')}`);\n          await processMidnightTasks(processDate);\n          processDate.setDate(processDate.getDate() + 1);\n        }\n      }\n      setSystemDate(date);\n      return true;\n    }\n    return false;\n  };\n\n  // 处理24:00任务（自动调用）\n  const processMidnightTasks = async targetDate => {\n    try {\n      // 只有在用户已登录的情况下才处理\n      if (!state.user) {\n        console.log('用户未登录，跳过24:00任务处理');\n        return;\n      }\n      const dateStr = targetDate.toISOString().split('T')[0];\n\n      // 检查是否正在处理中（防重复调用）\n      const processingKey = `processing_midnight_${dateStr}`;\n      if (window[processingKey]) {\n        console.log(`⏭️ ${dateStr} 的24:00任务正在处理中，跳过重复调用`);\n        return;\n      }\n\n      // 设置处理标志\n      window[processingKey] = true;\n      try {\n        console.log(`🕛 自动处理 ${dateStr} 的24:00任务...`);\n        const response = await taskAPI.processMidnightTasks(dateStr);\n        if (response.success) {\n          if (response.data.skipped) {\n            console.log(`⏭️ 24:00任务已处理过:`, response.data);\n          } else {\n            console.log(`✅ 24:00任务处理完成:`, response.data);\n          }\n        } else {\n          console.warn('⚠️ 24:00任务处理警告:', response.message);\n        }\n      } finally {\n        // 清除处理标志\n        delete window[processingKey];\n      }\n    } catch (error) {\n      console.error('❌ 自动24:00处理失败:', error);\n      // 不抛出错误，避免影响日期切换\n    }\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    changePassword,\n    refreshAuth,\n    setSystemDate,\n    setSystemDateSafely,\n    advanceDay,\n    resetToInitialDate,\n    canSetDate\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook for using context\n_s(AppProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","taskAPI","jsxDEV","_jsxDEV","AppContext","initialDate","Date","savedSystemDate","localStorage","getItem","currentSystemDate","initialState","user","isAuthenticated","loading","error","systemDate","actionTypes","SET_LOADING","SET_USER","SET_ERROR","LOGOUT","SET_SYSTEM_DATE","appReducer","state","action","type","payload","console","log","AppProvider","children","_s","dispatch","initAuth","token","savedUser","response","verify","success","JSON","parse","removeItem","login","studentId","password","rememberMe","isAdmin","toUpperCase","startsWith","loginEndpoint","data","axios","post","userData","admin","student","setItem","stringify","id","message","logout","changePassword","oldPassword","newPassword","refreshAuth","setSystemDate","date","toISOString","advanceDay","currentDate","nextDay","setDate","getDate","toLocaleDateString","processMidnightTasks","resetToInitialDate","resetToInitial","warn","canSetDate","targetDate","today","setHours","target","setSystemDateSafely","processDate","dateStr","split","processingKey","window","skipped","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["/Users/danieldong/Documents/GitHub/gougegaoshu/frontend/src/contexts/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI, taskAPI } from '../services/api';\n\nconst AppContext = createContext();\n\n// 初始状态\nconst initialDate = new Date();\nconst savedSystemDate = localStorage.getItem('systemDate');\nconst currentSystemDate = savedSystemDate ? new Date(savedSystemDate) : new Date(initialDate);\n\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  systemDate: currentSystemDate,\n  initialDate: new Date(initialDate)\n};\n\n// Action类型\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  LOGOUT: 'LOGOUT',\n  SET_SYSTEM_DATE: 'SET_SYSTEM_DATE'\n};\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return { ...state, loading: action.payload };\n    \n    case actionTypes.SET_USER:\n      console.log('🔄 Reducer SET_USER 执行:', {\n        payload: action.payload,\n        isAuthenticated: !!action.payload\n      });\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload,\n        loading: false,\n        error: null\n      };\n    \n    case actionTypes.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    \n    case actionTypes.LOGOUT:\n      return { \n        ...state, \n        user: null, \n        isAuthenticated: false, \n        loading: false \n      };\n    \n    case actionTypes.SET_SYSTEM_DATE:\n      return { ...state, systemDate: action.payload };\n    \n    default:\n      return state;\n  }\n}\n\n// Context Provider\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // 初始化时检查token\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      \n      if (token && savedUser) {\n        try {\n          // 验证token是否有效\n          const response = await authAPI.verify();\n          if (response.success) {\n            dispatch({ \n              type: actionTypes.SET_USER, \n              payload: JSON.parse(savedUser) \n            });\n          } else {\n            // token无效，清除本地存储\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({ type: actionTypes.LOGOUT });\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({ type: actionTypes.LOGOUT });\n        }\n      } else {\n        dispatch({ type: actionTypes.SET_LOADING, payload: false });\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // 登录\n  const login = async (studentId, password, rememberMe = false) => {\n    try {\n      console.log(`🔐 AppContext login 开始: ${studentId}`);\n      dispatch({ type: actionTypes.SET_LOADING, payload: true });\n      dispatch({ type: actionTypes.SET_ERROR, payload: null });\n\n      // 判断是管理员还是学生登录\n      const isAdmin = studentId.toUpperCase().startsWith('ADMIN');\n      const loginEndpoint = isAdmin\n        ? '/api/auth/admin/login'\n        : '/api/auth/login';\n\n      console.log(`🌐 使用 axios 调用${isAdmin ? '管理员' : '学生'}登录接口: ${loginEndpoint}`);\n      const { data: response } = await axios.post(loginEndpoint, {\n        studentId,\n        password\n      });\n\n      console.log(`📨 API 响应:`, response);\n\n      if (response.success) {\n        // 根据登录类型获取用户信息\n        const userData = isAdmin ? response.data.admin : response.data.student;\n        const { token } = response.data;\n\n        console.log(`👤 用户信息:`, userData);\n        console.log(`🔑 Token:`, token);\n\n        // 保存到localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        console.log(`💾 用户信息已保存到 localStorage`);\n        console.log(`💾 localStorage token:`, localStorage.getItem('token'));\n        console.log(`💾 localStorage user:`, localStorage.getItem('user'));\n\n        if (rememberMe) {\n          localStorage.setItem('savedCredentials', JSON.stringify({\n            studentId,\n            password\n          }));\n        } else {\n          localStorage.removeItem('savedCredentials');\n        }\n\n        dispatch({ type: actionTypes.SET_USER, payload: userData });\n        console.log(`✅ 登录成功，用户状态已更新: ${userData.id}`);\n        console.log(`🔄 Dispatch SET_USER 完成`);\n        console.log(`🔍 用户数据:`, userData);\n        console.log(`🔍 即将返回登录结果...`);\n        return { success: true, user: userData };\n      } else {\n        console.error(`❌ API 返回登录失败: ${response.message}`);\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      console.error(`❌ 登录异常:`, error);\n      dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 登出\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({ type: actionTypes.LOGOUT });\n  };\n\n\n\n  // 修改密码\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(oldPassword, newPassword);\n      return response;\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 刷新认证状态\n  const refreshAuth = async () => {\n    const token = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n\n    if (token && savedUser) {\n      try {\n        // 验证token是否有效\n        const response = await authAPI.verify();\n        if (response.success) {\n          dispatch({\n            type: actionTypes.SET_USER,\n            payload: JSON.parse(savedUser)\n          });\n          return true;\n        } else {\n          // token无效，清除本地存储\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({ type: actionTypes.LOGOUT });\n          return false;\n        }\n      } catch (error) {\n        console.error('Token验证失败:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        dispatch({ type: actionTypes.LOGOUT });\n        return false;\n      }\n    } else {\n      dispatch({ type: actionTypes.SET_LOADING, payload: false });\n      return false;\n    }\n  };\n\n  // 设置系统日期（用于模拟）\n  const setSystemDate = (date) => {\n    localStorage.setItem('systemDate', date.toISOString());\n    dispatch({ type: actionTypes.SET_SYSTEM_DATE, payload: date });\n  };\n\n  // 进入下一天（模拟功能）\n  const advanceDay = async () => {\n    try {\n      const currentDate = new Date(state.systemDate);\n      const nextDay = new Date(currentDate);\n      nextDay.setDate(nextDay.getDate() + 1);\n\n      console.log(`📅 从 ${currentDate.toLocaleDateString('zh-CN')} 前进到 ${nextDay.toLocaleDateString('zh-CN')}`);\n\n      // 在切换到下一天之前，先处理当天的未完成任务\n      await processMidnightTasks(currentDate);\n\n      // 设置新日期\n      setSystemDate(nextDay);\n\n      console.log(`✅ 日期切换完成: ${nextDay.toLocaleDateString('zh-CN')}`);\n    } catch (error) {\n      console.error('❌ advanceDay 失败:', error);\n      throw error; // 重新抛出错误，让调用者知道失败了\n    }\n  };\n\n  // 重置到初始日期并清空所有任务数据\n  const resetToInitialDate = async () => {\n    try {\n      console.log('🔄 开始重置到初始状态...');\n\n      // 如果用户已登录，先清空任务数据\n      if (state.user) {\n        console.log('🗑️ 清空所有任务数据...');\n        const response = await taskAPI.resetToInitial();\n        if (response.success) {\n          console.log('✅ 任务数据清空成功:', response.data);\n        } else {\n          console.warn('⚠️ 任务数据清空失败:', response.message);\n        }\n      }\n\n      // 重置日期\n      console.log('📅 重置日期到初始状态...');\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n\n      console.log('✅ 重置完成！所有任务数据已清空，可重新导入任务');\n    } catch (error) {\n      console.error('❌ 重置失败:', error);\n      // 即使API调用失败，仍然重置日期\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n    }\n  };\n\n  // 检查是否可以设置日期（只能设置今天或未来的日期）\n  const canSetDate = (targetDate) => {\n    const today = new Date(state.initialDate);\n    today.setHours(0, 0, 0, 0);\n    const target = new Date(targetDate);\n    target.setHours(0, 0, 0, 0);\n    return target >= today;\n  };\n\n  // 安全设置系统日期（只允许设置今天或未来日期）\n  const setSystemDateSafely = async (date) => {\n    if (canSetDate(date)) {\n      const currentDate = new Date(state.systemDate);\n      const targetDate = new Date(date);\n\n      // 如果是跳跃到未来日期，需要处理中间所有日期的24:00任务\n      if (targetDate > currentDate) {\n        console.log(`🔄 跳跃日期：从 ${currentDate.toLocaleDateString('zh-CN')} 到 ${targetDate.toLocaleDateString('zh-CN')}`);\n        let processDate = new Date(currentDate);\n        while (processDate < targetDate) {\n          console.log(`🕛 处理中间日期: ${processDate.toLocaleDateString('zh-CN')}`);\n          await processMidnightTasks(processDate);\n          processDate.setDate(processDate.getDate() + 1);\n        }\n      }\n\n      setSystemDate(date);\n      return true;\n    }\n    return false;\n  };\n\n  // 处理24:00任务（自动调用）\n  const processMidnightTasks = async (targetDate) => {\n    try {\n      // 只有在用户已登录的情况下才处理\n      if (!state.user) {\n        console.log('用户未登录，跳过24:00任务处理');\n        return;\n      }\n\n      const dateStr = targetDate.toISOString().split('T')[0];\n\n      // 检查是否正在处理中（防重复调用）\n      const processingKey = `processing_midnight_${dateStr}`;\n      if (window[processingKey]) {\n        console.log(`⏭️ ${dateStr} 的24:00任务正在处理中，跳过重复调用`);\n        return;\n      }\n\n      // 设置处理标志\n      window[processingKey] = true;\n\n      try {\n        console.log(`🕛 自动处理 ${dateStr} 的24:00任务...`);\n\n        const response = await taskAPI.processMidnightTasks(dateStr);\n\n        if (response.success) {\n          if (response.data.skipped) {\n            console.log(`⏭️ 24:00任务已处理过:`, response.data);\n          } else {\n            console.log(`✅ 24:00任务处理完成:`, response.data);\n          }\n        } else {\n          console.warn('⚠️ 24:00任务处理警告:', response.message);\n        }\n      } finally {\n        // 清除处理标志\n        delete window[processingKey];\n      }\n    } catch (error) {\n      console.error('❌ 自动24:00处理失败:', error);\n      // 不抛出错误，避免影响日期切换\n    }\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout,\n    changePassword,\n    refreshAuth,\n    setSystemDate,\n    setSystemDateSafely,\n    advanceDay,\n    resetToInitialDate,\n    canSetDate\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Hook for using context\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}