{"ast":null,"code":"/**\n * 数据一致性工具\n * 确保前端状态与后端数据库保持同步\n *//**\n * 清空所有相关的本地缓存\n * @param {string[]} additionalKeys - 额外需要清除的缓存键\n */export const clearAllCache=function(){let additionalKeys=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];console.log('🧹 开始清空本地缓存...');// 标准缓存键模式\nconst standardPatterns=['tasks_','profile_','leave_records_','task_report_','students_','admin_','user_','systemDate'];// 查找所有匹配的缓存键\nconst allKeys=Object.keys(localStorage);const keysToRemove=allKeys.filter(key=>standardPatterns.some(pattern=>key.startsWith(pattern))||additionalKeys.includes(key));// 清除缓存\nkeysToRemove.forEach(key=>{localStorage.removeItem(key);console.log(`   - 清除缓存: ${key}`);});console.log(`✅ 已清除 ${keysToRemove.length} 个缓存项`);return keysToRemove;};/**\n * 强制刷新页面以确保数据一致性\n * @param {number} delay - 延迟时间（毫秒）\n * @param {string} message - 刷新前显示的消息\n */export const forceRefresh=function(){let delay=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1000;let message=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(message){console.log(message);}if(typeof window!=='undefined'){console.log(`🔄 ${delay}ms 后刷新页面以确保数据一致性...`);setTimeout(()=>{window.location.reload();},delay);}};/**\n * 完整的数据重置流程\n * @param {Function} apiResetFunction - 后端重置API函数\n * @param {Object} options - 配置选项\n */export const performCompleteReset=async function(apiResetFunction){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{confirmMessage='确定要重置所有数据吗？此操作无法撤销！',successMessage='数据重置成功，页面将刷新',additionalCacheKeys=[],refreshDelay=1000,onSuccess=null,onError=null}=options;// 确认操作\nif(!window.confirm(confirmMessage)){return{success:false,cancelled:true};}try{console.log('🔄 开始完整数据重置流程...');// 1. 调用后端API重置数据库\nconsole.log('📡 调用后端重置API...');const response=await apiResetFunction();if(!response.success){throw new Error(response.message||'后端重置失败');}console.log('✅ 后端数据重置成功:',response.data);// 2. 清空前端缓存\nconst clearedKeys=clearAllCache(additionalCacheKeys);// 3. 执行成功回调\nif(onSuccess){await onSuccess(response.data);}// 4. 显示成功消息\nif(successMessage){alert(successMessage);}// 5. 强制刷新页面\nforceRefresh(refreshDelay,'🔄 准备刷新页面...');return{success:true,data:response.data,clearedCacheKeys:clearedKeys};}catch(error){console.error('❌ 完整重置失败:',error);// 即使API失败，也尝试清空缓存\nclearAllCache(additionalCacheKeys);// 执行错误回调\nif(onError){onError(error);}return{success:false,error:error.message||'重置失败'};}};/**\n * 学生端重置专用函数\n * @param {Function} resetAPI - 学生重置API\n * @param {Function} setSystemDate - 设置系统日期函数\n * @param {Date} initialDate - 初始日期\n */export const performStudentReset=async(resetAPI,setSystemDate,initialDate)=>{return performCompleteReset(resetAPI,{confirmMessage:'⚠️ 确定要重置所有任务数据吗？\\n\\n此操作将：\\n- 清空所有任务记录\\n- 清空请假记录\\n- 重置日期到初始状态\\n- 清空本地缓存\\n\\n此操作无法撤销！',successMessage:'✅ 学生数据重置成功！\\n所有任务数据已清空，日期已重置，页面将刷新。',onSuccess:async()=>{// 重置系统日期\nlocalStorage.removeItem('systemDate');setSystemDate(new Date(initialDate));console.log('📅 系统日期已重置到初始状态');}});};/**\n * 管理员端重置专用函数\n * @param {Function} resetAPI - 管理员重置API\n * @param {Function} setStudents - 设置学生列表函数\n * @param {Function} setSelectedStudent - 设置选中学生函数\n * @param {Function} setTaskReport - 设置任务报告函数\n */export const performAdminReset=async(resetAPI,setStudents,setSelectedStudent,setTaskReport)=>{return performCompleteReset(resetAPI,{confirmMessage:'⚠️ 警告：此操作将删除所有学生的任务数据、请假记录和调度历史，且无法恢复！\\n\\n🔴 最后确认：您确定要清空整个系统的所有任务数据吗？',successMessage:'✅ 管理员重置成功！\\n所有学生的任务数据已清空，页面将刷新。',additionalCacheKeys:['admin_dashboard_state'],onSuccess:async()=>{// 重置管理员界面状态\nsetStudents([]);setSelectedStudent(null);setTaskReport(null);console.log('🔧 管理员界面状态已重置');}});};/**\n * 密码重置后的数据同步\n * @param {string} studentId - 学生ID\n * @param {Function} setStudents - 设置学生列表函数\n * @param {Function} setSelectedStudent - 设置选中学生函数\n */export const syncPasswordReset=(studentId,setStudents,setSelectedStudent)=>{console.log(`🔄 同步学生 ${studentId} 的密码重置状态...`);// 更新学生列表中的强制修改密码状态\nsetStudents(prevStudents=>prevStudents.map(student=>student.id===studentId?{...student,force_password_change:true}:student));// 更新选中学生状态\nsetSelectedStudent(prev=>prev&&prev.id===studentId?{...prev,force_password_change:true}:prev);// 清除该学生的用户缓存\nconst userCacheKey=`user_${studentId}`;if(localStorage.getItem(userCacheKey)){localStorage.removeItem(userCacheKey);console.log(`   - 清除学生 ${studentId} 的用户缓存`);}console.log(`✅ 学生 ${studentId} 的密码重置状态已同步`);};export default{clearAllCache,forceRefresh,performCompleteReset,performStudentReset,performAdminReset,syncPasswordReset};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}