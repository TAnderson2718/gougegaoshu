{"ast":null,"code":"var _jsxFileName = \"/Users/danieldong/Documents/GitHub/gougegaoshu/frontend/src/contexts/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI, taskAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\n// 初始状态\nconst initialDate = new Date();\nconst savedSystemDate = localStorage.getItem('systemDate');\nconst currentSystemDate = savedSystemDate ? new Date(savedSystemDate) : new Date(initialDate);\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  systemDate: currentSystemDate,\n  initialDate: new Date(initialDate)\n};\n\n// Action类型\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  LOGOUT: 'LOGOUT',\n  SET_SYSTEM_DATE: 'SET_SYSTEM_DATE'\n};\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload,\n        loading: false,\n        error: null\n      };\n    case actionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case actionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false\n      };\n    case actionTypes.SET_SYSTEM_DATE:\n      return {\n        ...state,\n        systemDate: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Context Provider\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // 初始化时检查token\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      if (token && savedUser) {\n        try {\n          // 验证token是否有效\n          const response = await authAPI.verify();\n          if (response.success) {\n            dispatch({\n              type: actionTypes.SET_USER,\n              payload: JSON.parse(savedUser)\n            });\n          } else {\n            // token无效，清除本地存储\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({\n              type: actionTypes.LOGOUT\n            });\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: actionTypes.LOGOUT\n          });\n        }\n      } else {\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    initAuth();\n  }, []);\n\n  // 登录\n  const login = async (studentId, password, rememberMe = false) => {\n    try {\n      dispatch({\n        type: actionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: actionTypes.SET_ERROR,\n        payload: null\n      });\n      const response = await authAPI.login(studentId, password);\n      if (response.success) {\n        const {\n          token,\n          student\n        } = response.data;\n\n        // 保存到localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(student));\n        if (rememberMe) {\n          localStorage.setItem('savedCredentials', JSON.stringify({\n            studentId,\n            password\n          }));\n        } else {\n          localStorage.removeItem('savedCredentials');\n        }\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: student\n        });\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      dispatch({\n        type: actionTypes.SET_ERROR,\n        payload: error.message\n      });\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 登出\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: actionTypes.LOGOUT\n    });\n  };\n\n  // 强制修改密码\n  const forceChangePassword = async newPassword => {\n    try {\n      const response = await authAPI.forceChangePassword(newPassword);\n      if (response.success) {\n        // 更新用户状态\n        const updatedUser = {\n          ...state.user,\n          forcePasswordChange: false\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: updatedUser\n        });\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 修改密码\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(oldPassword, newPassword);\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 设置系统日期（用于模拟）\n  const setSystemDate = date => {\n    localStorage.setItem('systemDate', date.toISOString());\n    dispatch({\n      type: actionTypes.SET_SYSTEM_DATE,\n      payload: date\n    });\n  };\n\n  // 进入下一天（模拟功能）\n  const advanceDay = async () => {\n    try {\n      const currentDate = new Date(state.systemDate);\n      const nextDay = new Date(currentDate);\n      nextDay.setDate(nextDay.getDate() + 1);\n      console.log(`📅 从 ${currentDate.toLocaleDateString('zh-CN')} 前进到 ${nextDay.toLocaleDateString('zh-CN')}`);\n\n      // 在切换到下一天之前，先处理当天的未完成任务\n      await processMidnightTasks(currentDate);\n\n      // 设置新日期\n      setSystemDate(nextDay);\n      console.log(`✅ 日期切换完成: ${nextDay.toLocaleDateString('zh-CN')}`);\n    } catch (error) {\n      console.error('❌ advanceDay 失败:', error);\n      throw error; // 重新抛出错误，让调用者知道失败了\n    }\n  };\n\n  // 重置到初始日期和初始任务状态\n  const resetToInitialDate = async () => {\n    try {\n      console.log('🔄 开始重置到初始状态...');\n\n      // 如果用户已登录，先重置任务数据\n      if (state.user) {\n        console.log('🗑️ 重置任务数据到初始状态...');\n        const response = await taskAPI.resetToInitial();\n        if (response.success) {\n          console.log('✅ 任务数据重置成功:', response.data);\n        } else {\n          console.warn('⚠️ 任务数据重置失败:', response.message);\n        }\n      }\n\n      // 重置日期\n      console.log('📅 重置日期到初始状态...');\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n      console.log('✅ 重置完成！');\n    } catch (error) {\n      console.error('❌ 重置失败:', error);\n      // 即使API调用失败，仍然重置日期\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n    }\n  };\n\n  // 检查是否可以设置日期（只能设置今天或未来的日期）\n  const canSetDate = targetDate => {\n    const today = new Date(state.initialDate);\n    today.setHours(0, 0, 0, 0);\n    const target = new Date(targetDate);\n    target.setHours(0, 0, 0, 0);\n    return target >= today;\n  };\n\n  // 安全设置系统日期（只允许设置今天或未来日期）\n  const setSystemDateSafely = async date => {\n    if (canSetDate(date)) {\n      const currentDate = new Date(state.systemDate);\n      const targetDate = new Date(date);\n\n      // 如果是跳跃到未来日期，需要处理中间所有日期的24:00任务\n      if (targetDate > currentDate) {\n        let processDate = new Date(currentDate);\n        while (processDate < targetDate) {\n          await processMidnightTasks(processDate);\n          processDate.setDate(processDate.getDate() + 1);\n        }\n      }\n      setSystemDate(date);\n      return true;\n    }\n    return false;\n  };\n\n  // 处理24:00任务（自动调用）\n  const processMidnightTasks = async targetDate => {\n    try {\n      // 只有在用户已登录的情况下才处理\n      if (!state.user) {\n        console.log('用户未登录，跳过24:00任务处理');\n        return;\n      }\n      const dateStr = targetDate.toISOString().split('T')[0];\n      console.log(`🕛 自动处理 ${dateStr} 的24:00任务...`);\n      const response = await taskAPI.processMidnightTasks(dateStr);\n      if (response.success) {\n        console.log(`✅ 24:00任务处理完成:`, response.data);\n      } else {\n        console.warn('⚠️ 24:00任务处理警告:', response.message);\n      }\n    } catch (error) {\n      console.error('❌ 自动24:00处理失败:', error);\n      // 不抛出错误，避免影响日期切换\n    }\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    forceChangePassword,\n    changePassword,\n    setSystemDate,\n    setSystemDateSafely,\n    advanceDay,\n    resetToInitialDate,\n    canSetDate\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook for using context\n_s(AppProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","taskAPI","jsxDEV","_jsxDEV","AppContext","initialDate","Date","savedSystemDate","localStorage","getItem","currentSystemDate","initialState","user","isAuthenticated","loading","error","systemDate","actionTypes","SET_LOADING","SET_USER","SET_ERROR","LOGOUT","SET_SYSTEM_DATE","appReducer","state","action","type","payload","AppProvider","children","_s","dispatch","initAuth","token","savedUser","response","verify","success","JSON","parse","removeItem","console","login","studentId","password","rememberMe","student","data","setItem","stringify","message","logout","forceChangePassword","newPassword","updatedUser","forcePasswordChange","changePassword","oldPassword","setSystemDate","date","toISOString","advanceDay","currentDate","nextDay","setDate","getDate","log","toLocaleDateString","processMidnightTasks","resetToInitialDate","resetToInitial","warn","canSetDate","targetDate","today","setHours","target","setSystemDateSafely","processDate","dateStr","split","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["/Users/danieldong/Documents/GitHub/gougegaoshu/frontend/src/contexts/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI, taskAPI } from '../services/api';\n\nconst AppContext = createContext();\n\n// 初始状态\nconst initialDate = new Date();\nconst savedSystemDate = localStorage.getItem('systemDate');\nconst currentSystemDate = savedSystemDate ? new Date(savedSystemDate) : new Date(initialDate);\n\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  systemDate: currentSystemDate,\n  initialDate: new Date(initialDate)\n};\n\n// Action类型\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  LOGOUT: 'LOGOUT',\n  SET_SYSTEM_DATE: 'SET_SYSTEM_DATE'\n};\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return { ...state, loading: action.payload };\n    \n    case actionTypes.SET_USER:\n      return { \n        ...state, \n        user: action.payload, \n        isAuthenticated: !!action.payload,\n        loading: false,\n        error: null\n      };\n    \n    case actionTypes.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    \n    case actionTypes.LOGOUT:\n      return { \n        ...state, \n        user: null, \n        isAuthenticated: false, \n        loading: false \n      };\n    \n    case actionTypes.SET_SYSTEM_DATE:\n      return { ...state, systemDate: action.payload };\n    \n    default:\n      return state;\n  }\n}\n\n// Context Provider\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // 初始化时检查token\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      \n      if (token && savedUser) {\n        try {\n          // 验证token是否有效\n          const response = await authAPI.verify();\n          if (response.success) {\n            dispatch({ \n              type: actionTypes.SET_USER, \n              payload: JSON.parse(savedUser) \n            });\n          } else {\n            // token无效，清除本地存储\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({ type: actionTypes.LOGOUT });\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({ type: actionTypes.LOGOUT });\n        }\n      } else {\n        dispatch({ type: actionTypes.SET_LOADING, payload: false });\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // 登录\n  const login = async (studentId, password, rememberMe = false) => {\n    try {\n      dispatch({ type: actionTypes.SET_LOADING, payload: true });\n      dispatch({ type: actionTypes.SET_ERROR, payload: null });\n\n      const response = await authAPI.login(studentId, password);\n      \n      if (response.success) {\n        const { token, student } = response.data;\n        \n        // 保存到localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(student));\n        \n        if (rememberMe) {\n          localStorage.setItem('savedCredentials', JSON.stringify({ \n            studentId, \n            password \n          }));\n        } else {\n          localStorage.removeItem('savedCredentials');\n        }\n\n        dispatch({ type: actionTypes.SET_USER, payload: student });\n        return { success: true };\n      }\n    } catch (error) {\n      dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 登出\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({ type: actionTypes.LOGOUT });\n  };\n\n  // 强制修改密码\n  const forceChangePassword = async (newPassword) => {\n    try {\n      const response = await authAPI.forceChangePassword(newPassword);\n      if (response.success) {\n        // 更新用户状态\n        const updatedUser = { ...state.user, forcePasswordChange: false };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        dispatch({ type: actionTypes.SET_USER, payload: updatedUser });\n        return { success: true };\n      }\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 修改密码\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(oldPassword, newPassword);\n      return response;\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 设置系统日期（用于模拟）\n  const setSystemDate = (date) => {\n    localStorage.setItem('systemDate', date.toISOString());\n    dispatch({ type: actionTypes.SET_SYSTEM_DATE, payload: date });\n  };\n\n  // 进入下一天（模拟功能）\n  const advanceDay = async () => {\n    try {\n      const currentDate = new Date(state.systemDate);\n      const nextDay = new Date(currentDate);\n      nextDay.setDate(nextDay.getDate() + 1);\n      \n      console.log(`📅 从 ${currentDate.toLocaleDateString('zh-CN')} 前进到 ${nextDay.toLocaleDateString('zh-CN')}`);\n      \n      // 在切换到下一天之前，先处理当天的未完成任务\n      await processMidnightTasks(currentDate);\n      \n      // 设置新日期\n      setSystemDate(nextDay);\n      \n      console.log(`✅ 日期切换完成: ${nextDay.toLocaleDateString('zh-CN')}`);\n    } catch (error) {\n      console.error('❌ advanceDay 失败:', error);\n      throw error; // 重新抛出错误，让调用者知道失败了\n    }\n  };\n\n  // 重置到初始日期和初始任务状态\n  const resetToInitialDate = async () => {\n    try {\n      console.log('🔄 开始重置到初始状态...');\n      \n      // 如果用户已登录，先重置任务数据\n      if (state.user) {\n        console.log('🗑️ 重置任务数据到初始状态...');\n        const response = await taskAPI.resetToInitial();\n        if (response.success) {\n          console.log('✅ 任务数据重置成功:', response.data);\n        } else {\n          console.warn('⚠️ 任务数据重置失败:', response.message);\n        }\n      }\n      \n      // 重置日期\n      console.log('📅 重置日期到初始状态...');\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n      \n      console.log('✅ 重置完成！');\n    } catch (error) {\n      console.error('❌ 重置失败:', error);\n      // 即使API调用失败，仍然重置日期\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(state.initialDate));\n    }\n  };\n\n  // 检查是否可以设置日期（只能设置今天或未来的日期）\n  const canSetDate = (targetDate) => {\n    const today = new Date(state.initialDate);\n    today.setHours(0, 0, 0, 0);\n    const target = new Date(targetDate);\n    target.setHours(0, 0, 0, 0);\n    return target >= today;\n  };\n\n  // 安全设置系统日期（只允许设置今天或未来日期）\n  const setSystemDateSafely = async (date) => {\n    if (canSetDate(date)) {\n      const currentDate = new Date(state.systemDate);\n      const targetDate = new Date(date);\n      \n      // 如果是跳跃到未来日期，需要处理中间所有日期的24:00任务\n      if (targetDate > currentDate) {\n        let processDate = new Date(currentDate);\n        while (processDate < targetDate) {\n          await processMidnightTasks(processDate);\n          processDate.setDate(processDate.getDate() + 1);\n        }\n      }\n      \n      setSystemDate(date);\n      return true;\n    }\n    return false;\n  };\n\n  // 处理24:00任务（自动调用）\n  const processMidnightTasks = async (targetDate) => {\n    try {\n      // 只有在用户已登录的情况下才处理\n      if (!state.user) {\n        console.log('用户未登录，跳过24:00任务处理');\n        return;\n      }\n\n      const dateStr = targetDate.toISOString().split('T')[0];\n      console.log(`🕛 自动处理 ${dateStr} 的24:00任务...`);\n\n      const response = await taskAPI.processMidnightTasks(dateStr);\n      \n      if (response.success) {\n        console.log(`✅ 24:00任务处理完成:`, response.data);\n      } else {\n        console.warn('⚠️ 24:00任务处理警告:', response.message);\n      }\n    } catch (error) {\n      console.error('❌ 自动24:00处理失败:', error);\n      // 不抛出错误，避免影响日期切换\n    }\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout,\n    forceChangePassword,\n    changePassword,\n    setSystemDate,\n    setSystemDateSafely,\n    advanceDay,\n    resetToInitialDate,\n    canSetDate\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Hook for using context\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,OAAO,EAAEC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,gBAAGR,aAAa,CAAC,CAAC;;AAElC;AACA,MAAMS,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;AAC9B,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;AAC1D,MAAMC,iBAAiB,GAAGH,eAAe,GAAG,IAAID,IAAI,CAACC,eAAe,CAAC,GAAG,IAAID,IAAI,CAACD,WAAW,CAAC;AAE7F,MAAMM,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAEN,iBAAiB;EAC7BL,WAAW,EAAE,IAAIC,IAAI,CAACD,WAAW;AACnC,CAAC;;AAED;AACA,MAAMY,WAAW,GAAG;EAClBC,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBC,SAAS,EAAE,WAAW;EACtBC,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE;AACnB,CAAC;;AAED;AACA,SAASC,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACjC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKT,WAAW,CAACC,WAAW;MAC1B,OAAO;QAAE,GAAGM,KAAK;QAAEV,OAAO,EAAEW,MAAM,CAACE;MAAQ,CAAC;IAE9C,KAAKV,WAAW,CAACE,QAAQ;MACvB,OAAO;QACL,GAAGK,KAAK;QACRZ,IAAI,EAAEa,MAAM,CAACE,OAAO;QACpBd,eAAe,EAAE,CAAC,CAACY,MAAM,CAACE,OAAO;QACjCb,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKE,WAAW,CAACG,SAAS;MACxB,OAAO;QAAE,GAAGI,KAAK;QAAET,KAAK,EAAEU,MAAM,CAACE,OAAO;QAAEb,OAAO,EAAE;MAAM,CAAC;IAE5D,KAAKG,WAAW,CAACI,MAAM;MACrB,OAAO;QACL,GAAGG,KAAK;QACRZ,IAAI,EAAE,IAAI;QACVC,eAAe,EAAE,KAAK;QACtBC,OAAO,EAAE;MACX,CAAC;IAEH,KAAKG,WAAW,CAACK,eAAe;MAC9B,OAAO;QAAE,GAAGE,KAAK;QAAER,UAAU,EAAES,MAAM,CAACE;MAAQ,CAAC;IAEjD;MACE,OAAOH,KAAK;EAChB;AACF;;AAEA;AACA,OAAO,MAAMI,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGjC,UAAU,CAACyB,UAAU,EAAEZ,YAAY,CAAC;;EAE9D;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMiC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,KAAK,GAAGzB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMyB,SAAS,GAAG1B,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAE9C,IAAIwB,KAAK,IAAIC,SAAS,EAAE;QACtB,IAAI;UACF;UACA,MAAMC,QAAQ,GAAG,MAAMnC,OAAO,CAACoC,MAAM,CAAC,CAAC;UACvC,IAAID,QAAQ,CAACE,OAAO,EAAE;YACpBN,QAAQ,CAAC;cACPL,IAAI,EAAET,WAAW,CAACE,QAAQ;cAC1BQ,OAAO,EAAEW,IAAI,CAACC,KAAK,CAACL,SAAS;YAC/B,CAAC,CAAC;UACJ,CAAC,MAAM;YACL;YACA1B,YAAY,CAACgC,UAAU,CAAC,OAAO,CAAC;YAChChC,YAAY,CAACgC,UAAU,CAAC,MAAM,CAAC;YAC/BT,QAAQ,CAAC;cAAEL,IAAI,EAAET,WAAW,CAACI;YAAO,CAAC,CAAC;UACxC;QACF,CAAC,CAAC,OAAON,KAAK,EAAE;UACd0B,OAAO,CAAC1B,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UAClCP,YAAY,CAACgC,UAAU,CAAC,OAAO,CAAC;UAChChC,YAAY,CAACgC,UAAU,CAAC,MAAM,CAAC;UAC/BT,QAAQ,CAAC;YAAEL,IAAI,EAAET,WAAW,CAACI;UAAO,CAAC,CAAC;QACxC;MACF,CAAC,MAAM;QACLU,QAAQ,CAAC;UAAEL,IAAI,EAAET,WAAW,CAACC,WAAW;UAAES,OAAO,EAAE;QAAM,CAAC,CAAC;MAC7D;IACF,CAAC;IAEDK,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMU,KAAK,GAAG,MAAAA,CAAOC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,GAAG,KAAK,KAAK;IAC/D,IAAI;MACFd,QAAQ,CAAC;QAAEL,IAAI,EAAET,WAAW,CAACC,WAAW;QAAES,OAAO,EAAE;MAAK,CAAC,CAAC;MAC1DI,QAAQ,CAAC;QAAEL,IAAI,EAAET,WAAW,CAACG,SAAS;QAAEO,OAAO,EAAE;MAAK,CAAC,CAAC;MAExD,MAAMQ,QAAQ,GAAG,MAAMnC,OAAO,CAAC0C,KAAK,CAACC,SAAS,EAAEC,QAAQ,CAAC;MAEzD,IAAIT,QAAQ,CAACE,OAAO,EAAE;QACpB,MAAM;UAAEJ,KAAK;UAAEa;QAAQ,CAAC,GAAGX,QAAQ,CAACY,IAAI;;QAExC;QACAvC,YAAY,CAACwC,OAAO,CAAC,OAAO,EAAEf,KAAK,CAAC;QACpCzB,YAAY,CAACwC,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACH,OAAO,CAAC,CAAC;QAErD,IAAID,UAAU,EAAE;UACdrC,YAAY,CAACwC,OAAO,CAAC,kBAAkB,EAAEV,IAAI,CAACW,SAAS,CAAC;YACtDN,SAAS;YACTC;UACF,CAAC,CAAC,CAAC;QACL,CAAC,MAAM;UACLpC,YAAY,CAACgC,UAAU,CAAC,kBAAkB,CAAC;QAC7C;QAEAT,QAAQ,CAAC;UAAEL,IAAI,EAAET,WAAW,CAACE,QAAQ;UAAEQ,OAAO,EAAEmB;QAAQ,CAAC,CAAC;QAC1D,OAAO;UAAET,OAAO,EAAE;QAAK,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdgB,QAAQ,CAAC;QAAEL,IAAI,EAAET,WAAW,CAACG,SAAS;QAAEO,OAAO,EAAEZ,KAAK,CAACmC;MAAQ,CAAC,CAAC;MACjE,OAAO;QAAEb,OAAO,EAAE,KAAK;QAAEa,OAAO,EAAEnC,KAAK,CAACmC;MAAQ,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnB3C,YAAY,CAACgC,UAAU,CAAC,OAAO,CAAC;IAChChC,YAAY,CAACgC,UAAU,CAAC,MAAM,CAAC;IAC/BT,QAAQ,CAAC;MAAEL,IAAI,EAAET,WAAW,CAACI;IAAO,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAM+B,mBAAmB,GAAG,MAAOC,WAAW,IAAK;IACjD,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMnC,OAAO,CAACoD,mBAAmB,CAACC,WAAW,CAAC;MAC/D,IAAIlB,QAAQ,CAACE,OAAO,EAAE;QACpB;QACA,MAAMiB,WAAW,GAAG;UAAE,GAAG9B,KAAK,CAACZ,IAAI;UAAE2C,mBAAmB,EAAE;QAAM,CAAC;QACjE/C,YAAY,CAACwC,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACK,WAAW,CAAC,CAAC;QACzDvB,QAAQ,CAAC;UAAEL,IAAI,EAAET,WAAW,CAACE,QAAQ;UAAEQ,OAAO,EAAE2B;QAAY,CAAC,CAAC;QAC9D,OAAO;UAAEjB,OAAO,EAAE;QAAK,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACd,OAAO;QAAEsB,OAAO,EAAE,KAAK;QAAEa,OAAO,EAAEnC,KAAK,CAACmC;MAAQ,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMM,cAAc,GAAG,MAAAA,CAAOC,WAAW,EAAEJ,WAAW,KAAK;IACzD,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMnC,OAAO,CAACwD,cAAc,CAACC,WAAW,EAAEJ,WAAW,CAAC;MACvE,OAAOlB,QAAQ;IACjB,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACd,OAAO;QAAEsB,OAAO,EAAE,KAAK;QAAEa,OAAO,EAAEnC,KAAK,CAACmC;MAAQ,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMQ,aAAa,GAAIC,IAAI,IAAK;IAC9BnD,YAAY,CAACwC,OAAO,CAAC,YAAY,EAAEW,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;IACtD7B,QAAQ,CAAC;MAAEL,IAAI,EAAET,WAAW,CAACK,eAAe;MAAEK,OAAO,EAAEgC;IAAK,CAAC,CAAC;EAChE,CAAC;;EAED;EACA,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,WAAW,GAAG,IAAIxD,IAAI,CAACkB,KAAK,CAACR,UAAU,CAAC;MAC9C,MAAM+C,OAAO,GAAG,IAAIzD,IAAI,CAACwD,WAAW,CAAC;MACrCC,OAAO,CAACC,OAAO,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAEtCxB,OAAO,CAACyB,GAAG,CAAC,QAAQJ,WAAW,CAACK,kBAAkB,CAAC,OAAO,CAAC,QAAQJ,OAAO,CAACI,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;;MAEzG;MACA,MAAMC,oBAAoB,CAACN,WAAW,CAAC;;MAEvC;MACAJ,aAAa,CAACK,OAAO,CAAC;MAEtBtB,OAAO,CAACyB,GAAG,CAAC,aAAaH,OAAO,CAACI,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;IACjE,CAAC,CAAC,OAAOpD,KAAK,EAAE;MACd0B,OAAO,CAAC1B,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;;EAED;EACA,MAAMsD,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF5B,OAAO,CAACyB,GAAG,CAAC,iBAAiB,CAAC;;MAE9B;MACA,IAAI1C,KAAK,CAACZ,IAAI,EAAE;QACd6B,OAAO,CAACyB,GAAG,CAAC,oBAAoB,CAAC;QACjC,MAAM/B,QAAQ,GAAG,MAAMlC,OAAO,CAACqE,cAAc,CAAC,CAAC;QAC/C,IAAInC,QAAQ,CAACE,OAAO,EAAE;UACpBI,OAAO,CAACyB,GAAG,CAAC,aAAa,EAAE/B,QAAQ,CAACY,IAAI,CAAC;QAC3C,CAAC,MAAM;UACLN,OAAO,CAAC8B,IAAI,CAAC,cAAc,EAAEpC,QAAQ,CAACe,OAAO,CAAC;QAChD;MACF;;MAEA;MACAT,OAAO,CAACyB,GAAG,CAAC,iBAAiB,CAAC;MAC9B1D,YAAY,CAACgC,UAAU,CAAC,YAAY,CAAC;MACrCkB,aAAa,CAAC,IAAIpD,IAAI,CAACkB,KAAK,CAACnB,WAAW,CAAC,CAAC;MAE1CoC,OAAO,CAACyB,GAAG,CAAC,SAAS,CAAC;IACxB,CAAC,CAAC,OAAOnD,KAAK,EAAE;MACd0B,OAAO,CAAC1B,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B;MACAP,YAAY,CAACgC,UAAU,CAAC,YAAY,CAAC;MACrCkB,aAAa,CAAC,IAAIpD,IAAI,CAACkB,KAAK,CAACnB,WAAW,CAAC,CAAC;IAC5C;EACF,CAAC;;EAED;EACA,MAAMmE,UAAU,GAAIC,UAAU,IAAK;IACjC,MAAMC,KAAK,GAAG,IAAIpE,IAAI,CAACkB,KAAK,CAACnB,WAAW,CAAC;IACzCqE,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC1B,MAAMC,MAAM,GAAG,IAAItE,IAAI,CAACmE,UAAU,CAAC;IACnCG,MAAM,CAACD,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3B,OAAOC,MAAM,IAAIF,KAAK;EACxB,CAAC;;EAED;EACA,MAAMG,mBAAmB,GAAG,MAAOlB,IAAI,IAAK;IAC1C,IAAIa,UAAU,CAACb,IAAI,CAAC,EAAE;MACpB,MAAMG,WAAW,GAAG,IAAIxD,IAAI,CAACkB,KAAK,CAACR,UAAU,CAAC;MAC9C,MAAMyD,UAAU,GAAG,IAAInE,IAAI,CAACqD,IAAI,CAAC;;MAEjC;MACA,IAAIc,UAAU,GAAGX,WAAW,EAAE;QAC5B,IAAIgB,WAAW,GAAG,IAAIxE,IAAI,CAACwD,WAAW,CAAC;QACvC,OAAOgB,WAAW,GAAGL,UAAU,EAAE;UAC/B,MAAML,oBAAoB,CAACU,WAAW,CAAC;UACvCA,WAAW,CAACd,OAAO,CAACc,WAAW,CAACb,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;QAChD;MACF;MAEAP,aAAa,CAACC,IAAI,CAAC;MACnB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAMS,oBAAoB,GAAG,MAAOK,UAAU,IAAK;IACjD,IAAI;MACF;MACA,IAAI,CAACjD,KAAK,CAACZ,IAAI,EAAE;QACf6B,OAAO,CAACyB,GAAG,CAAC,mBAAmB,CAAC;QAChC;MACF;MAEA,MAAMa,OAAO,GAAGN,UAAU,CAACb,WAAW,CAAC,CAAC,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtDvC,OAAO,CAACyB,GAAG,CAAC,WAAWa,OAAO,cAAc,CAAC;MAE7C,MAAM5C,QAAQ,GAAG,MAAMlC,OAAO,CAACmE,oBAAoB,CAACW,OAAO,CAAC;MAE5D,IAAI5C,QAAQ,CAACE,OAAO,EAAE;QACpBI,OAAO,CAACyB,GAAG,CAAC,gBAAgB,EAAE/B,QAAQ,CAACY,IAAI,CAAC;MAC9C,CAAC,MAAM;QACLN,OAAO,CAAC8B,IAAI,CAAC,iBAAiB,EAAEpC,QAAQ,CAACe,OAAO,CAAC;MACnD;IACF,CAAC,CAAC,OAAOnC,KAAK,EAAE;MACd0B,OAAO,CAAC1B,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC;IACF;EACF,CAAC;EAED,MAAMkE,KAAK,GAAG;IACZ,GAAGzD,KAAK;IACRkB,KAAK;IACLS,MAAM;IACNC,mBAAmB;IACnBI,cAAc;IACdE,aAAa;IACbmB,mBAAmB;IACnBhB,UAAU;IACVQ,kBAAkB;IAClBG;EACF,CAAC;EAED,oBACErE,OAAA,CAACC,UAAU,CAAC8E,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApD,QAAA,EAC/BA;EAAQ;IAAAsD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;;AAED;AAAAxD,EAAA,CA7OaF,WAAW;AAAA2D,EAAA,GAAX3D,WAAW;AA8OxB,OAAO,MAAM4D,MAAM,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC1B,MAAMC,OAAO,GAAG7F,UAAU,CAACO,UAAU,CAAC;EACtC,IAAI,CAACsF,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,MAAM;AAQnB,eAAepF,UAAU;AAAC,IAAAmF,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}