{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';import{authAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=/*#__PURE__*/createContext();// 初始状态\nconst initialDate=new Date();const savedSystemDate=localStorage.getItem('systemDate');const currentSystemDate=savedSystemDate?new Date(savedSystemDate):new Date(initialDate);const initialState={user:null,isAuthenticated:false,loading:true,error:null,systemDate:currentSystemDate,initialDate:new Date(initialDate)};// Action类型\nconst actionTypes={SET_LOADING:'SET_LOADING',SET_USER:'SET_USER',SET_ERROR:'SET_ERROR',LOGOUT:'LOGOUT',SET_SYSTEM_DATE:'SET_SYSTEM_DATE'};// Reducer\nfunction appReducer(state,action){switch(action.type){case actionTypes.SET_LOADING:return{...state,loading:action.payload};case actionTypes.SET_USER:return{...state,user:action.payload,isAuthenticated:!!action.payload,loading:false,error:null};case actionTypes.SET_ERROR:return{...state,error:action.payload,loading:false};case actionTypes.LOGOUT:return{...state,user:null,isAuthenticated:false,loading:false};case actionTypes.SET_SYSTEM_DATE:return{...state,systemDate:action.payload};default:return state;}}// Context Provider\nexport const AppProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(appReducer,initialState);// 初始化时检查token\nuseEffect(()=>{const initAuth=async()=>{const token=localStorage.getItem('token');const savedUser=localStorage.getItem('user');if(token&&savedUser){try{// 验证token是否有效\nconst response=await authAPI.verify();if(response.success){dispatch({type:actionTypes.SET_USER,payload:JSON.parse(savedUser)});}else{// token无效，清除本地存储\nlocalStorage.removeItem('token');localStorage.removeItem('user');dispatch({type:actionTypes.LOGOUT});}}catch(error){console.error('Token验证失败:',error);localStorage.removeItem('token');localStorage.removeItem('user');dispatch({type:actionTypes.LOGOUT});}}else{dispatch({type:actionTypes.SET_LOADING,payload:false});}};initAuth();},[]);// 登录\nconst login=async function(studentId,password){let rememberMe=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;try{dispatch({type:actionTypes.SET_LOADING,payload:true});dispatch({type:actionTypes.SET_ERROR,payload:null});const response=await authAPI.login(studentId,password);if(response.success){const{token,student}=response.data;// 保存到localStorage\nlocalStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(student));if(rememberMe){localStorage.setItem('savedCredentials',JSON.stringify({studentId,password}));}else{localStorage.removeItem('savedCredentials');}dispatch({type:actionTypes.SET_USER,payload:student});return{success:true};}}catch(error){dispatch({type:actionTypes.SET_ERROR,payload:error.message});return{success:false,message:error.message};}};// 登出\nconst logout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');dispatch({type:actionTypes.LOGOUT});};// 强制修改密码\nconst forceChangePassword=async newPassword=>{try{const response=await authAPI.forceChangePassword(newPassword);if(response.success){// 更新用户状态\nconst updatedUser={...state.user,forcePasswordChange:false};localStorage.setItem('user',JSON.stringify(updatedUser));dispatch({type:actionTypes.SET_USER,payload:updatedUser});return{success:true};}}catch(error){return{success:false,message:error.message};}};// 修改密码\nconst changePassword=async(oldPassword,newPassword)=>{try{const response=await authAPI.changePassword(oldPassword,newPassword);return response;}catch(error){return{success:false,message:error.message};}};// 设置系统日期（用于模拟）\nconst setSystemDate=date=>{localStorage.setItem('systemDate',date.toISOString());dispatch({type:actionTypes.SET_SYSTEM_DATE,payload:date});};// 进入下一天（模拟功能）\nconst advanceDay=async()=>{const currentDate=new Date(state.systemDate);const nextDay=new Date(currentDate);nextDay.setDate(nextDay.getDate()+1);// 在切换到下一天之前，先处理当天的未完成任务\nawait processMidnightTasks(currentDate);setSystemDate(nextDay);};// 重置到初始日期\nconst resetToInitialDate=()=>{localStorage.removeItem('systemDate');setSystemDate(new Date(state.initialDate));};// 检查是否可以设置日期（只能设置今天或未来的日期）\nconst canSetDate=targetDate=>{const today=new Date(state.initialDate);today.setHours(0,0,0,0);const target=new Date(targetDate);target.setHours(0,0,0,0);return target>=today;};// 安全设置系统日期（只允许设置今天或未来日期）\nconst setSystemDateSafely=async date=>{if(canSetDate(date)){const currentDate=new Date(state.systemDate);const targetDate=new Date(date);// 如果是跳跃到未来日期，需要处理中间所有日期的24:00任务\nif(targetDate>currentDate){let processDate=new Date(currentDate);while(processDate<targetDate){await processMidnightTasks(processDate);processDate.setDate(processDate.getDate()+1);}}setSystemDate(date);return true;}return false;};// 处理24:00任务（自动调用）\nconst processMidnightTasks=async targetDate=>{try{// 只有在用户已登录的情况下才处理\nif(!state.user)return;const dateStr=targetDate.toISOString().split('T')[0];console.log(`自动处理 ${dateStr} 的24:00任务...`);const response=await fetch('/api/tasks/midnight-process',{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${localStorage.getItem('token')}`},body:JSON.stringify({date:dateStr})});if(response.ok){const result=await response.json();if(result.success){console.log(`24:00任务处理完成:`,result.data);}else{console.warn('24:00任务处理警告:',result.message);}}}catch(error){console.error('自动24:00处理失败:',error);// 不抛出错误，避免影响日期切换\n}};const value={...state,login,logout,forceChangePassword,changePassword,setSystemDate,setSystemDateSafely,advanceDay,resetToInitialDate,canSetDate};return/*#__PURE__*/_jsx(AppContext.Provider,{value:value,children:children});};// Hook for using context\nexport const useApp=()=>{const context=useContext(AppContext);if(!context){throw new Error('useApp must be used within an AppProvider');}return context;};export default AppContext;","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","jsx","_jsx","AppContext","initialDate","Date","savedSystemDate","localStorage","getItem","currentSystemDate","initialState","user","isAuthenticated","loading","error","systemDate","actionTypes","SET_LOADING","SET_USER","SET_ERROR","LOGOUT","SET_SYSTEM_DATE","appReducer","state","action","type","payload","AppProvider","_ref","children","dispatch","initAuth","token","savedUser","response","verify","success","JSON","parse","removeItem","console","login","studentId","password","rememberMe","arguments","length","undefined","student","data","setItem","stringify","message","logout","forceChangePassword","newPassword","updatedUser","forcePasswordChange","changePassword","oldPassword","setSystemDate","date","toISOString","advanceDay","currentDate","nextDay","setDate","getDate","processMidnightTasks","resetToInitialDate","canSetDate","targetDate","today","setHours","target","setSystemDateSafely","processDate","dateStr","split","log","fetch","method","headers","body","ok","result","json","warn","value","Provider","useApp","context","Error"],"sources":["/Users/danieldong/Documents/GitHub/gougegaoshu/frontend/src/contexts/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AppContext = createContext();\n\n// 初始状态\nconst initialDate = new Date();\nconst savedSystemDate = localStorage.getItem('systemDate');\nconst currentSystemDate = savedSystemDate ? new Date(savedSystemDate) : new Date(initialDate);\n\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  systemDate: currentSystemDate,\n  initialDate: new Date(initialDate)\n};\n\n// Action类型\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  LOGOUT: 'LOGOUT',\n  SET_SYSTEM_DATE: 'SET_SYSTEM_DATE'\n};\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return { ...state, loading: action.payload };\n    \n    case actionTypes.SET_USER:\n      return { \n        ...state, \n        user: action.payload, \n        isAuthenticated: !!action.payload,\n        loading: false,\n        error: null\n      };\n    \n    case actionTypes.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    \n    case actionTypes.LOGOUT:\n      return { \n        ...state, \n        user: null, \n        isAuthenticated: false, \n        loading: false \n      };\n    \n    case actionTypes.SET_SYSTEM_DATE:\n      return { ...state, systemDate: action.payload };\n    \n    default:\n      return state;\n  }\n}\n\n// Context Provider\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // 初始化时检查token\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      \n      if (token && savedUser) {\n        try {\n          // 验证token是否有效\n          const response = await authAPI.verify();\n          if (response.success) {\n            dispatch({ \n              type: actionTypes.SET_USER, \n              payload: JSON.parse(savedUser) \n            });\n          } else {\n            // token无效，清除本地存储\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({ type: actionTypes.LOGOUT });\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({ type: actionTypes.LOGOUT });\n        }\n      } else {\n        dispatch({ type: actionTypes.SET_LOADING, payload: false });\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // 登录\n  const login = async (studentId, password, rememberMe = false) => {\n    try {\n      dispatch({ type: actionTypes.SET_LOADING, payload: true });\n      dispatch({ type: actionTypes.SET_ERROR, payload: null });\n\n      const response = await authAPI.login(studentId, password);\n      \n      if (response.success) {\n        const { token, student } = response.data;\n        \n        // 保存到localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(student));\n        \n        if (rememberMe) {\n          localStorage.setItem('savedCredentials', JSON.stringify({ \n            studentId, \n            password \n          }));\n        } else {\n          localStorage.removeItem('savedCredentials');\n        }\n\n        dispatch({ type: actionTypes.SET_USER, payload: student });\n        return { success: true };\n      }\n    } catch (error) {\n      dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 登出\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({ type: actionTypes.LOGOUT });\n  };\n\n  // 强制修改密码\n  const forceChangePassword = async (newPassword) => {\n    try {\n      const response = await authAPI.forceChangePassword(newPassword);\n      if (response.success) {\n        // 更新用户状态\n        const updatedUser = { ...state.user, forcePasswordChange: false };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        dispatch({ type: actionTypes.SET_USER, payload: updatedUser });\n        return { success: true };\n      }\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 修改密码\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(oldPassword, newPassword);\n      return response;\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 设置系统日期（用于模拟）\n  const setSystemDate = (date) => {\n    localStorage.setItem('systemDate', date.toISOString());\n    dispatch({ type: actionTypes.SET_SYSTEM_DATE, payload: date });\n  };\n\n  // 进入下一天（模拟功能）\n  const advanceDay = async () => {\n    const currentDate = new Date(state.systemDate);\n    const nextDay = new Date(currentDate);\n    nextDay.setDate(nextDay.getDate() + 1);\n    \n    // 在切换到下一天之前，先处理当天的未完成任务\n    await processMidnightTasks(currentDate);\n    \n    setSystemDate(nextDay);\n  };\n\n  // 重置到初始日期\n  const resetToInitialDate = () => {\n    localStorage.removeItem('systemDate');\n    setSystemDate(new Date(state.initialDate));\n  };\n\n  // 检查是否可以设置日期（只能设置今天或未来的日期）\n  const canSetDate = (targetDate) => {\n    const today = new Date(state.initialDate);\n    today.setHours(0, 0, 0, 0);\n    const target = new Date(targetDate);\n    target.setHours(0, 0, 0, 0);\n    return target >= today;\n  };\n\n  // 安全设置系统日期（只允许设置今天或未来日期）\n  const setSystemDateSafely = async (date) => {\n    if (canSetDate(date)) {\n      const currentDate = new Date(state.systemDate);\n      const targetDate = new Date(date);\n      \n      // 如果是跳跃到未来日期，需要处理中间所有日期的24:00任务\n      if (targetDate > currentDate) {\n        let processDate = new Date(currentDate);\n        while (processDate < targetDate) {\n          await processMidnightTasks(processDate);\n          processDate.setDate(processDate.getDate() + 1);\n        }\n      }\n      \n      setSystemDate(date);\n      return true;\n    }\n    return false;\n  };\n\n  // 处理24:00任务（自动调用）\n  const processMidnightTasks = async (targetDate) => {\n    try {\n      // 只有在用户已登录的情况下才处理\n      if (!state.user) return;\n\n      const dateStr = targetDate.toISOString().split('T')[0];\n      console.log(`自动处理 ${dateStr} 的24:00任务...`);\n\n      const response = await fetch('/api/tasks/midnight-process', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          date: dateStr\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        if (result.success) {\n          console.log(`24:00任务处理完成:`, result.data);\n        } else {\n          console.warn('24:00任务处理警告:', result.message);\n        }\n      }\n    } catch (error) {\n      console.error('自动24:00处理失败:', error);\n      // 不抛出错误，避免影响日期切换\n    }\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout,\n    forceChangePassword,\n    changePassword,\n    setSystemDate,\n    setSystemDateSafely,\n    advanceDay,\n    resetToInitialDate,\n    canSetDate\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Hook for using context\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}