{"ast":null,"code":"var _jsxFileName = \"/Users/danieldong/Documents/GitHub/gougegaoshu/frontend/src/contexts/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\n// 初始状态\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  systemDate: new Date(),\n  offlineMode: false\n};\n\n// Action类型\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  LOGOUT: 'LOGOUT',\n  SET_SYSTEM_DATE: 'SET_SYSTEM_DATE',\n  SET_OFFLINE_MODE: 'SET_OFFLINE_MODE'\n};\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload,\n        loading: false,\n        error: null\n      };\n    case actionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case actionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false\n      };\n    case actionTypes.SET_SYSTEM_DATE:\n      return {\n        ...state,\n        systemDate: action.payload\n      };\n    case actionTypes.SET_OFFLINE_MODE:\n      return {\n        ...state,\n        offlineMode: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Context Provider\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // 初始化时检查token\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      if (token && savedUser) {\n        try {\n          // 验证token是否有效\n          const response = await authAPI.verify();\n          if (response.success) {\n            dispatch({\n              type: actionTypes.SET_USER,\n              payload: JSON.parse(savedUser)\n            });\n          } else {\n            // token无效，清除本地存储\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({\n              type: actionTypes.LOGOUT\n            });\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: actionTypes.LOGOUT\n          });\n        }\n      } else {\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    initAuth();\n  }, []);\n\n  // 模拟登录数据\n  const mockLogin = studentId => {\n    const mockUser = {\n      id: studentId,\n      name: studentId === 'ST001' ? '张三' : studentId === 'ST002' ? '李四' : '测试用户',\n      studentId: studentId,\n      forcePasswordChange: false\n    };\n    localStorage.setItem('user', JSON.stringify(mockUser));\n    dispatch({\n      type: actionTypes.SET_USER,\n      payload: mockUser\n    });\n    dispatch({\n      type: actionTypes.SET_OFFLINE_MODE,\n      payload: true\n    });\n    return {\n      success: true\n    };\n  };\n\n  // 登录\n  const login = async (studentId, password, rememberMe = false) => {\n    try {\n      dispatch({\n        type: actionTypes.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: actionTypes.SET_ERROR,\n        payload: null\n      });\n      const response = await authAPI.login(studentId, password);\n      if (response.success) {\n        const {\n          token,\n          student\n        } = response.data;\n\n        // 保存到localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(student));\n        if (rememberMe) {\n          localStorage.setItem('savedCredentials', JSON.stringify({\n            studentId,\n            password\n          }));\n        } else {\n          localStorage.removeItem('savedCredentials');\n        }\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: student\n        });\n        dispatch({\n          type: actionTypes.SET_OFFLINE_MODE,\n          payload: false\n        });\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      // 如果是网络错误或429错误，提供离线模式选项\n      if (error.message.includes('网络错误') || error.message.includes('Too Many') || error.message.includes('429')) {\n        dispatch({\n          type: actionTypes.SET_ERROR,\n          payload: null\n        });\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: false\n        });\n\n        // 自动使用离线模式\n        if (studentId && (studentId === 'ST001' || studentId === 'ST002' || studentId === 'ST003')) {\n          return mockLogin(studentId);\n        }\n      }\n      dispatch({\n        type: actionTypes.SET_ERROR,\n        payload: error.message\n      });\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 登出\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: actionTypes.LOGOUT\n    });\n  };\n\n  // 强制修改密码\n  const forceChangePassword = async newPassword => {\n    try {\n      const response = await authAPI.forceChangePassword(newPassword);\n      if (response.success) {\n        // 更新用户状态\n        const updatedUser = {\n          ...state.user,\n          forcePasswordChange: false\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: updatedUser\n        });\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 修改密码\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(oldPassword, newPassword);\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // 设置系统日期（用于模拟）\n  const setSystemDate = date => {\n    dispatch({\n      type: actionTypes.SET_SYSTEM_DATE,\n      payload: date\n    });\n  };\n\n  // 进入下一天（模拟功能）\n  const advanceDay = () => {\n    const nextDay = new Date(state.systemDate);\n    nextDay.setDate(nextDay.getDate() + 1);\n    setSystemDate(nextDay);\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    forceChangePassword,\n    changePassword,\n    setSystemDate,\n    advanceDay\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook for using context\n_s(AppProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","jsxDEV","_jsxDEV","AppContext","initialState","user","isAuthenticated","loading","error","systemDate","Date","offlineMode","actionTypes","SET_LOADING","SET_USER","SET_ERROR","LOGOUT","SET_SYSTEM_DATE","SET_OFFLINE_MODE","appReducer","state","action","type","payload","AppProvider","children","_s","dispatch","initAuth","token","localStorage","getItem","savedUser","response","verify","success","JSON","parse","removeItem","console","mockLogin","studentId","mockUser","id","name","forcePasswordChange","setItem","stringify","login","password","rememberMe","student","data","message","includes","logout","forceChangePassword","newPassword","updatedUser","changePassword","oldPassword","setSystemDate","date","advanceDay","nextDay","setDate","getDate","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["/Users/danieldong/Documents/GitHub/gougegaoshu/frontend/src/contexts/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AppContext = createContext();\n\n// 初始状态\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null,\n  systemDate: new Date(),\n  offlineMode: false\n};\n\n// Action类型\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_ERROR: 'SET_ERROR',\n  LOGOUT: 'LOGOUT',\n  SET_SYSTEM_DATE: 'SET_SYSTEM_DATE',\n  SET_OFFLINE_MODE: 'SET_OFFLINE_MODE'\n};\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return { ...state, loading: action.payload };\n    \n    case actionTypes.SET_USER:\n      return { \n        ...state, \n        user: action.payload, \n        isAuthenticated: !!action.payload,\n        loading: false,\n        error: null\n      };\n    \n    case actionTypes.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    \n    case actionTypes.LOGOUT:\n      return { \n        ...state, \n        user: null, \n        isAuthenticated: false, \n        loading: false \n      };\n    \n    case actionTypes.SET_SYSTEM_DATE:\n      return { ...state, systemDate: action.payload };\n    \n    case actionTypes.SET_OFFLINE_MODE:\n      return { ...state, offlineMode: action.payload };\n    \n    default:\n      return state;\n  }\n}\n\n// Context Provider\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // 初始化时检查token\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      \n      if (token && savedUser) {\n        try {\n          // 验证token是否有效\n          const response = await authAPI.verify();\n          if (response.success) {\n            dispatch({ \n              type: actionTypes.SET_USER, \n              payload: JSON.parse(savedUser) \n            });\n          } else {\n            // token无效，清除本地存储\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            dispatch({ type: actionTypes.LOGOUT });\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({ type: actionTypes.LOGOUT });\n        }\n      } else {\n        dispatch({ type: actionTypes.SET_LOADING, payload: false });\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // 模拟登录数据\n  const mockLogin = (studentId) => {\n    const mockUser = {\n      id: studentId,\n      name: studentId === 'ST001' ? '张三' : studentId === 'ST002' ? '李四' : '测试用户',\n      studentId: studentId,\n      forcePasswordChange: false\n    };\n    \n    localStorage.setItem('user', JSON.stringify(mockUser));\n    dispatch({ type: actionTypes.SET_USER, payload: mockUser });\n    dispatch({ type: actionTypes.SET_OFFLINE_MODE, payload: true });\n    return { success: true };\n  };\n\n  // 登录\n  const login = async (studentId, password, rememberMe = false) => {\n    try {\n      dispatch({ type: actionTypes.SET_LOADING, payload: true });\n      dispatch({ type: actionTypes.SET_ERROR, payload: null });\n\n      const response = await authAPI.login(studentId, password);\n      \n      if (response.success) {\n        const { token, student } = response.data;\n        \n        // 保存到localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(student));\n        \n        if (rememberMe) {\n          localStorage.setItem('savedCredentials', JSON.stringify({ \n            studentId, \n            password \n          }));\n        } else {\n          localStorage.removeItem('savedCredentials');\n        }\n\n        dispatch({ type: actionTypes.SET_USER, payload: student });\n        dispatch({ type: actionTypes.SET_OFFLINE_MODE, payload: false });\n        return { success: true };\n      }\n    } catch (error) {\n      // 如果是网络错误或429错误，提供离线模式选项\n      if (error.message.includes('网络错误') || error.message.includes('Too Many') || error.message.includes('429')) {\n        dispatch({ type: actionTypes.SET_ERROR, payload: null });\n        dispatch({ type: actionTypes.SET_LOADING, payload: false });\n        \n        // 自动使用离线模式\n        if (studentId && (studentId === 'ST001' || studentId === 'ST002' || studentId === 'ST003')) {\n          return mockLogin(studentId);\n        }\n      }\n      \n      dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 登出\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({ type: actionTypes.LOGOUT });\n  };\n\n  // 强制修改密码\n  const forceChangePassword = async (newPassword) => {\n    try {\n      const response = await authAPI.forceChangePassword(newPassword);\n      if (response.success) {\n        // 更新用户状态\n        const updatedUser = { ...state.user, forcePasswordChange: false };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        dispatch({ type: actionTypes.SET_USER, payload: updatedUser });\n        return { success: true };\n      }\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 修改密码\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      const response = await authAPI.changePassword(oldPassword, newPassword);\n      return response;\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // 设置系统日期（用于模拟）\n  const setSystemDate = (date) => {\n    dispatch({ type: actionTypes.SET_SYSTEM_DATE, payload: date });\n  };\n\n  // 进入下一天（模拟功能）\n  const advanceDay = () => {\n    const nextDay = new Date(state.systemDate);\n    nextDay.setDate(nextDay.getDate() + 1);\n    setSystemDate(nextDay);\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout,\n    forceChangePassword,\n    changePassword,\n    setSystemDate,\n    advanceDay\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Hook for using context\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}