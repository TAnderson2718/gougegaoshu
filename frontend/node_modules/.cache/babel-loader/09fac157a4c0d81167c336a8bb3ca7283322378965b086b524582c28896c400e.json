{"ast":null,"code":"/**\n * 数据一致性工具\n * 确保前端状态与后端数据库保持同步\n */\n\n/**\n * 清空所有相关的本地缓存\n * @param {string[]} additionalKeys - 额外需要清除的缓存键\n */\nexport const clearAllCache = (additionalKeys = []) => {\n  console.log('🧹 开始清空本地缓存...');\n\n  // 标准缓存键模式\n  const standardPatterns = ['tasks_', 'profile_', 'leave_records_', 'task_report_', 'students_', 'admin_', 'user_', 'systemDate'];\n\n  // 查找所有匹配的缓存键\n  const allKeys = Object.keys(localStorage);\n  const keysToRemove = allKeys.filter(key => standardPatterns.some(pattern => key.startsWith(pattern)) || additionalKeys.includes(key));\n\n  // 清除缓存\n  keysToRemove.forEach(key => {\n    localStorage.removeItem(key);\n    console.log(`   - 清除缓存: ${key}`);\n  });\n  console.log(`✅ 已清除 ${keysToRemove.length} 个缓存项`);\n  return keysToRemove;\n};\n\n/**\n * 强制刷新页面以确保数据一致性\n * @param {number} delay - 延迟时间（毫秒）\n * @param {string} message - 刷新前显示的消息\n */\nexport const forceRefresh = (delay = 1000, message = null) => {\n  if (message) {\n    console.log(message);\n  }\n  if (typeof window !== 'undefined') {\n    console.log(`🔄 ${delay}ms 后刷新页面以确保数据一致性...`);\n    setTimeout(() => {\n      window.location.reload();\n    }, delay);\n  }\n};\n\n/**\n * 完整的数据重置流程\n * @param {Function} apiResetFunction - 后端重置API函数\n * @param {Object} options - 配置选项\n */\nexport const performCompleteReset = async (apiResetFunction, options = {}) => {\n  const {\n    confirmMessage = '确定要重置所有数据吗？此操作无法撤销！',\n    successMessage = '数据重置成功，页面将刷新',\n    additionalCacheKeys = [],\n    refreshDelay = 1000,\n    onSuccess = null,\n    onError = null\n  } = options;\n\n  // 确认操作\n  if (!window.confirm(confirmMessage)) {\n    return {\n      success: false,\n      cancelled: true\n    };\n  }\n  try {\n    console.log('🔄 开始完整数据重置流程...');\n\n    // 1. 调用后端API重置数据库\n    console.log('📡 调用后端重置API...');\n    const response = await apiResetFunction();\n    if (!response.success) {\n      throw new Error(response.message || '后端重置失败');\n    }\n    console.log('✅ 后端数据重置成功:', response.data);\n\n    // 2. 清空前端缓存\n    const clearedKeys = clearAllCache(additionalCacheKeys);\n\n    // 3. 执行成功回调\n    if (onSuccess) {\n      await onSuccess(response.data);\n    }\n\n    // 4. 显示成功消息\n    if (successMessage) {\n      alert(successMessage);\n    }\n\n    // 5. 强制刷新页面\n    forceRefresh(refreshDelay, '🔄 准备刷新页面...');\n    return {\n      success: true,\n      data: response.data,\n      clearedCacheKeys: clearedKeys\n    };\n  } catch (error) {\n    console.error('❌ 完整重置失败:', error);\n\n    // 即使API失败，也尝试清空缓存\n    clearAllCache(additionalCacheKeys);\n\n    // 执行错误回调\n    if (onError) {\n      onError(error);\n    }\n    return {\n      success: false,\n      error: error.message || '重置失败'\n    };\n  }\n};\n\n/**\n * 学生端重置专用函数\n * @param {Function} resetAPI - 学生重置API\n * @param {Function} setSystemDate - 设置系统日期函数\n * @param {Date} initialDate - 初始日期\n */\nexport const performStudentReset = async (resetAPI, setSystemDate, initialDate) => {\n  return performCompleteReset(resetAPI, {\n    confirmMessage: '⚠️ 确定要重置所有任务数据吗？\\n\\n此操作将：\\n- 清空所有任务记录\\n- 清空请假记录\\n- 重置日期到初始状态\\n- 清空本地缓存\\n\\n此操作无法撤销！',\n    successMessage: '✅ 学生数据重置成功！\\n所有任务数据已清空，日期已重置，页面将刷新。',\n    onSuccess: async () => {\n      // 重置系统日期\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(initialDate));\n      console.log('📅 系统日期已重置到初始状态');\n    }\n  });\n};\n\n/**\n * 管理员端重置专用函数\n * @param {Function} resetAPI - 管理员重置API\n * @param {Function} setStudents - 设置学生列表函数\n * @param {Function} setSelectedStudent - 设置选中学生函数\n * @param {Function} setTaskReport - 设置任务报告函数\n */\nexport const performAdminReset = async (resetAPI, setStudents, setSelectedStudent, setTaskReport) => {\n  return performCompleteReset(resetAPI, {\n    confirmMessage: '⚠️ 警告：此操作将删除所有学生的任务数据、请假记录和调度历史，且无法恢复！\\n\\n🔴 最后确认：您确定要清空整个系统的所有任务数据吗？',\n    successMessage: '✅ 管理员重置成功！\\n所有学生的任务数据已清空，页面将刷新。',\n    additionalCacheKeys: ['admin_dashboard_state'],\n    onSuccess: async () => {\n      // 重置管理员界面状态\n      setStudents([]);\n      setSelectedStudent(null);\n      setTaskReport(null);\n      console.log('🔧 管理员界面状态已重置');\n    }\n  });\n};\n\n/**\n * 密码重置后的数据同步\n * @param {string} studentId - 学生ID\n * @param {Function} setStudents - 设置学生列表函数\n * @param {Function} setSelectedStudent - 设置选中学生函数\n */\nexport const syncPasswordReset = (studentId, setStudents, setSelectedStudent) => {\n  console.log(`🔄 同步学生 ${studentId} 的密码重置状态...`);\n\n  // 更新学生列表中的强制修改密码状态\n  setStudents(prevStudents => prevStudents.map(student => student.id === studentId ? {\n    ...student,\n    force_password_change: true\n  } : student));\n\n  // 更新选中学生状态\n  setSelectedStudent(prev => prev && prev.id === studentId ? {\n    ...prev,\n    force_password_change: true\n  } : prev);\n\n  // 清除该学生的用户缓存\n  const userCacheKey = `user_${studentId}`;\n  if (localStorage.getItem(userCacheKey)) {\n    localStorage.removeItem(userCacheKey);\n    console.log(`   - 清除学生 ${studentId} 的用户缓存`);\n  }\n  console.log(`✅ 学生 ${studentId} 的密码重置状态已同步`);\n};\nexport default {\n  clearAllCache,\n  forceRefresh,\n  performCompleteReset,\n  performStudentReset,\n  performAdminReset,\n  syncPasswordReset\n};","map":{"version":3,"names":["clearAllCache","additionalKeys","console","log","standardPatterns","allKeys","Object","keys","localStorage","keysToRemove","filter","key","some","pattern","startsWith","includes","forEach","removeItem","length","forceRefresh","delay","message","window","setTimeout","location","reload","performCompleteReset","apiResetFunction","options","confirmMessage","successMessage","additionalCacheKeys","refreshDelay","onSuccess","onError","confirm","success","cancelled","response","Error","data","clearedKeys","alert","clearedCacheKeys","error","performStudentReset","resetAPI","setSystemDate","initialDate","Date","performAdminReset","setStudents","setSelectedStudent","setTaskReport","syncPasswordReset","studentId","prevStudents","map","student","id","force_password_change","prev","userCacheKey","getItem"],"sources":["/Users/daniel/Documents/GitHub/gougegaoshu/frontend/src/utils/dataConsistency.js"],"sourcesContent":["/**\n * 数据一致性工具\n * 确保前端状态与后端数据库保持同步\n */\n\n/**\n * 清空所有相关的本地缓存\n * @param {string[]} additionalKeys - 额外需要清除的缓存键\n */\nexport const clearAllCache = (additionalKeys = []) => {\n  console.log('🧹 开始清空本地缓存...');\n  \n  // 标准缓存键模式\n  const standardPatterns = [\n    'tasks_',\n    'profile_',\n    'leave_records_',\n    'task_report_',\n    'students_',\n    'admin_',\n    'user_',\n    'systemDate'\n  ];\n  \n  // 查找所有匹配的缓存键\n  const allKeys = Object.keys(localStorage);\n  const keysToRemove = allKeys.filter(key => \n    standardPatterns.some(pattern => key.startsWith(pattern)) ||\n    additionalKeys.includes(key)\n  );\n  \n  // 清除缓存\n  keysToRemove.forEach(key => {\n    localStorage.removeItem(key);\n    console.log(`   - 清除缓存: ${key}`);\n  });\n  \n  console.log(`✅ 已清除 ${keysToRemove.length} 个缓存项`);\n  return keysToRemove;\n};\n\n/**\n * 强制刷新页面以确保数据一致性\n * @param {number} delay - 延迟时间（毫秒）\n * @param {string} message - 刷新前显示的消息\n */\nexport const forceRefresh = (delay = 1000, message = null) => {\n  if (message) {\n    console.log(message);\n  }\n  \n  if (typeof window !== 'undefined') {\n    console.log(`🔄 ${delay}ms 后刷新页面以确保数据一致性...`);\n    setTimeout(() => {\n      window.location.reload();\n    }, delay);\n  }\n};\n\n/**\n * 完整的数据重置流程\n * @param {Function} apiResetFunction - 后端重置API函数\n * @param {Object} options - 配置选项\n */\nexport const performCompleteReset = async (apiResetFunction, options = {}) => {\n  const {\n    confirmMessage = '确定要重置所有数据吗？此操作无法撤销！',\n    successMessage = '数据重置成功，页面将刷新',\n    additionalCacheKeys = [],\n    refreshDelay = 1000,\n    onSuccess = null,\n    onError = null\n  } = options;\n  \n  // 确认操作\n  if (!window.confirm(confirmMessage)) {\n    return { success: false, cancelled: true };\n  }\n  \n  try {\n    console.log('🔄 开始完整数据重置流程...');\n    \n    // 1. 调用后端API重置数据库\n    console.log('📡 调用后端重置API...');\n    const response = await apiResetFunction();\n    \n    if (!response.success) {\n      throw new Error(response.message || '后端重置失败');\n    }\n    \n    console.log('✅ 后端数据重置成功:', response.data);\n    \n    // 2. 清空前端缓存\n    const clearedKeys = clearAllCache(additionalCacheKeys);\n    \n    // 3. 执行成功回调\n    if (onSuccess) {\n      await onSuccess(response.data);\n    }\n    \n    // 4. 显示成功消息\n    if (successMessage) {\n      alert(successMessage);\n    }\n    \n    // 5. 强制刷新页面\n    forceRefresh(refreshDelay, '🔄 准备刷新页面...');\n    \n    return {\n      success: true,\n      data: response.data,\n      clearedCacheKeys: clearedKeys\n    };\n    \n  } catch (error) {\n    console.error('❌ 完整重置失败:', error);\n    \n    // 即使API失败，也尝试清空缓存\n    clearAllCache(additionalCacheKeys);\n    \n    // 执行错误回调\n    if (onError) {\n      onError(error);\n    }\n    \n    return {\n      success: false,\n      error: error.message || '重置失败'\n    };\n  }\n};\n\n/**\n * 学生端重置专用函数\n * @param {Function} resetAPI - 学生重置API\n * @param {Function} setSystemDate - 设置系统日期函数\n * @param {Date} initialDate - 初始日期\n */\nexport const performStudentReset = async (resetAPI, setSystemDate, initialDate) => {\n  return performCompleteReset(resetAPI, {\n    confirmMessage: '⚠️ 确定要重置所有任务数据吗？\\n\\n此操作将：\\n- 清空所有任务记录\\n- 清空请假记录\\n- 重置日期到初始状态\\n- 清空本地缓存\\n\\n此操作无法撤销！',\n    successMessage: '✅ 学生数据重置成功！\\n所有任务数据已清空，日期已重置，页面将刷新。',\n    onSuccess: async () => {\n      // 重置系统日期\n      localStorage.removeItem('systemDate');\n      setSystemDate(new Date(initialDate));\n      console.log('📅 系统日期已重置到初始状态');\n    }\n  });\n};\n\n/**\n * 管理员端重置专用函数\n * @param {Function} resetAPI - 管理员重置API\n * @param {Function} setStudents - 设置学生列表函数\n * @param {Function} setSelectedStudent - 设置选中学生函数\n * @param {Function} setTaskReport - 设置任务报告函数\n */\nexport const performAdminReset = async (resetAPI, setStudents, setSelectedStudent, setTaskReport) => {\n  return performCompleteReset(resetAPI, {\n    confirmMessage: '⚠️ 警告：此操作将删除所有学生的任务数据、请假记录和调度历史，且无法恢复！\\n\\n🔴 最后确认：您确定要清空整个系统的所有任务数据吗？',\n    successMessage: '✅ 管理员重置成功！\\n所有学生的任务数据已清空，页面将刷新。',\n    additionalCacheKeys: ['admin_dashboard_state'],\n    onSuccess: async () => {\n      // 重置管理员界面状态\n      setStudents([]);\n      setSelectedStudent(null);\n      setTaskReport(null);\n      console.log('🔧 管理员界面状态已重置');\n    }\n  });\n};\n\n/**\n * 密码重置后的数据同步\n * @param {string} studentId - 学生ID\n * @param {Function} setStudents - 设置学生列表函数\n * @param {Function} setSelectedStudent - 设置选中学生函数\n */\nexport const syncPasswordReset = (studentId, setStudents, setSelectedStudent) => {\n  console.log(`🔄 同步学生 ${studentId} 的密码重置状态...`);\n  \n  // 更新学生列表中的强制修改密码状态\n  setStudents(prevStudents => \n    prevStudents.map(student => \n      student.id === studentId \n        ? { ...student, force_password_change: true }\n        : student\n    )\n  );\n\n  // 更新选中学生状态\n  setSelectedStudent(prev => \n    prev && prev.id === studentId \n      ? { ...prev, force_password_change: true }\n      : prev\n  );\n\n  // 清除该学生的用户缓存\n  const userCacheKey = `user_${studentId}`;\n  if (localStorage.getItem(userCacheKey)) {\n    localStorage.removeItem(userCacheKey);\n    console.log(`   - 清除学生 ${studentId} 的用户缓存`);\n  }\n  \n  console.log(`✅ 学生 ${studentId} 的密码重置状态已同步`);\n};\n\nexport default {\n  clearAllCache,\n  forceRefresh,\n  performCompleteReset,\n  performStudentReset,\n  performAdminReset,\n  syncPasswordReset\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}