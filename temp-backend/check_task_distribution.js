const { query } = require('./config/database');

async function checkTaskDistribution() {
  try {
    console.log('üîç Ê£ÄÊü•‰ªªÂä°ÂàÜÈÖçÊÉÖÂÜµ...');
    
    // 1. Ê£ÄÊü•7Êúà‰ªΩÊâÄÊúâ‰ªªÂä°ÁöÑÂàÜÂ∏É
    console.log('\nüìä 7Êúà‰ªΩ‰ªªÂä°ÂàÜÂ∏ÉÁªüËÆ°:');
    const julyStats = await query(`
      SELECT
        DATE_FORMAT(task_date, '%Y-%m-%d') as date,
        COUNT(*) as total_tasks,
        SUM(CASE WHEN completed = 1 THEN 1 ELSE 0 END) as completed_tasks,
        GROUP_CONCAT(CONCAT(title, '(', CASE WHEN completed = 1 THEN '‚úÖ' ELSE '‚ùå' END, ')') SEPARATOR ', ') as task_list
      FROM tasks
      WHERE student_id = 'ST001'
      AND task_date >= '2025-07-01'
      AND task_date < '2025-08-01'
      GROUP BY DATE_FORMAT(task_date, '%Y-%m-%d')
      ORDER BY date
    `);
    
    console.log('Êó•Êúü | ÂÆåÊàê/ÊÄªÊï∞ | ÂÆåÊàêÁéá | ‰ªªÂä°ÂàóË°®');
    console.log('-----|----------|--------|----------');
    
    julyStats.forEach(row => {
      const completionRate = row.total_tasks > 0 ? Math.round((row.completed_tasks / row.total_tasks) * 100) : 0;
      console.log(`${row.date} | ${row.completed_tasks}/${row.total_tasks} | ${completionRate}% | ${row.task_list}`);
    });
    
    // 2. Ê£ÄÊü•ÊòØÂê¶Êúâ‰ªªÂä°Ë¢´ÊÑèÂ§ñÁßªÂä®Âà∞ÂÖ∂‰ªñÊó•Êúü
    console.log('\nüîç Ê£ÄÊü•‰ªªÂä°Ë∞ÉÂ∫¶ÂéÜÂè≤:');
    const scheduleHistory = await query(`
      SELECT 
        operation_date,
        operation_type,
        affected_tasks,
        details,
        created_at
      FROM task_schedule_history 
      WHERE student_id = 'ST001'
      ORDER BY created_at DESC
      LIMIT 10
    `);
    
    if (scheduleHistory.length > 0) {
      console.log('ÊúÄËøëÁöÑ‰ªªÂä°Ë∞ÉÂ∫¶ËÆ∞ÂΩï:');
      scheduleHistory.forEach((record, index) => {
        console.log(`  ${index + 1}. ${record.operation_date} - ${record.operation_type}`);
        console.log(`     ÂΩ±Âìç‰ªªÂä°Êï∞: ${record.affected_tasks}`);
        console.log(`     Êó∂Èó¥: ${record.created_at}`);
        if (record.details) {
          try {
            const details = JSON.parse(record.details);
            console.log(`     ËØ¶ÊÉÖ: ${JSON.stringify(details, null, 6)}`);
          } catch (e) {
            console.log(`     ËØ¶ÊÉÖ: ${record.details}`);
          }
        }
        console.log('');
      });
    } else {
      console.log('Ê≤°ÊúâÊâæÂà∞‰ªªÂä°Ë∞ÉÂ∫¶ÂéÜÂè≤ËÆ∞ÂΩï');
    }
    
    // 3. Ê£ÄÊü•ÊòØÂê¶Êúâoriginal_dateÂ≠óÊÆµÁöÑ‰ªªÂä°ÔºàË¢´Âª∂ÊúüÁöÑ‰ªªÂä°Ôºâ
    console.log('\nüìÖ Ê£ÄÊü•Âª∂Êúü‰ªªÂä°:');
    const deferredTasks = await query(`
      SELECT 
        id,
        title,
        DATE_FORMAT(task_date, '%Y-%m-%d') as task_current_date,
        DATE_FORMAT(original_date, '%Y-%m-%d') as original_date,
        completed,
        task_status
      FROM tasks 
      WHERE student_id = 'ST001' 
      AND original_date IS NOT NULL
      ORDER BY original_date, task_date
    `);
    
    if (deferredTasks.length > 0) {
      console.log('ÂèëÁé∞Âª∂Êúü‰ªªÂä°:');
      deferredTasks.forEach((task, index) => {
        console.log(`  ${index + 1}. ${task.title}`);
        console.log(`     ÂéüÂßãÊó•Êúü: ${task.original_date}`);
        console.log(`     ÂΩìÂâçÊó•Êúü: ${task.task_current_date}`);
        console.log(`     Áä∂ÊÄÅ: ${task.completed ? '‚úÖÂ∑≤ÂÆåÊàê' : '‚ùåÊú™ÂÆåÊàê'}`);
        console.log(`     ‰ªªÂä°Áä∂ÊÄÅ: ${task.task_status}`);
        console.log('');
      });
    } else {
      console.log('Ê≤°ÊúâÂèëÁé∞Âª∂Êúü‰ªªÂä°');
    }
    
    // 4. Ê£ÄÊü•ËØ∑ÂÅáËÆ∞ÂΩï
    console.log('\nüèñÔ∏è Ê£ÄÊü•ËØ∑ÂÅáËÆ∞ÂΩï:');
    const leaveRecords = await query(`
      SELECT 
        DATE_FORMAT(leave_date, '%Y-%m-%d') as leave_date,
        created_at
      FROM leave_records 
      WHERE student_id = 'ST001'
      ORDER BY leave_date
    `);
    
    if (leaveRecords.length > 0) {
      console.log('ËØ∑ÂÅáËÆ∞ÂΩï:');
      leaveRecords.forEach((record, index) => {
        console.log(`  ${index + 1}. ${record.leave_date} (Áî≥ËØ∑Êó∂Èó¥: ${record.created_at})`);
      });
    } else {
      console.log('Ê≤°ÊúâËØ∑ÂÅáËÆ∞ÂΩï');
    }
    
    // 5. Ê£ÄÊü•7Êúà21Êó•ÂâçÂêéÂá†Â§©ÁöÑËØ¶ÁªÜÊÉÖÂÜµ
    console.log('\nüéØ 7Êúà21Êó•ÂâçÂêé‰ªªÂä°ËØ¶ÊÉÖ:');
    const detailedTasks = await query(`
      SELECT 
        id,
        title,
        task_type,
        DATE_FORMAT(task_date, '%Y-%m-%d') as task_date,
        DATE_FORMAT(original_date, '%Y-%m-%d') as original_date,
        completed,
        task_status,
        created_at
      FROM tasks 
      WHERE student_id = 'ST001' 
      AND task_date BETWEEN '2025-07-19' AND '2025-07-23'
      ORDER BY task_date, created_at
    `);
    
    detailedTasks.forEach(task => {
      console.log(`üìã ${task.task_date}: ${task.title} (${task.task_type})`);
      console.log(`   Áä∂ÊÄÅ: ${task.completed ? '‚úÖÂ∑≤ÂÆåÊàê' : '‚ùåÊú™ÂÆåÊàê'}`);
      console.log(`   ‰ªªÂä°Áä∂ÊÄÅ: ${task.task_status || 'normal'}`);
      if (task.original_date && task.original_date !== task.task_date) {
        console.log(`   ‚ö†Ô∏è ÂéüÂßãÊó•Êúü: ${task.original_date} -> ÂΩìÂâçÊó•Êúü: ${task.task_date}`);
      }
      console.log(`   ÂàõÂª∫Êó∂Èó¥: ${task.created_at}`);
      console.log('');
    });
    
    // 6. ÊÄªÁªìÂàÜÊûê
    console.log('\nüìà ÂàÜÊûêÊÄªÁªì:');
    const totalTasks = julyStats.reduce((sum, row) => sum + row.total_tasks, 0);
    const totalCompleted = julyStats.reduce((sum, row) => sum + row.completed_tasks, 0);
    const overallRate = totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0;
    
    console.log(`ÊÄª‰ªªÂä°Êï∞: ${totalTasks}`);
    console.log(`Â∑≤ÂÆåÊàê: ${totalCompleted}`);
    console.log(`ÊÄªÂÆåÊàêÁéá: ${overallRate}%`);
    
    // Ê£ÄÊü•ÊòØÂê¶ÊúâÂºÇÂ∏∏ÁöÑÊó•ÊúüÂàÜÂ∏É
    const tasksPerDay = julyStats.filter(row => !row.task_list.includes('‰ºëÊÅØ') && !row.task_list.includes('ËØ∑ÂÅá'));
    const taskCounts = tasksPerDay.map(row => row.total_tasks);
    const avgTasksPerDay = taskCounts.length > 0 ? (taskCounts.reduce((a, b) => a + b, 0) / taskCounts.length).toFixed(1) : 0;
    
    console.log(`Â∑•‰ΩúÊó•Âπ≥Âùá‰ªªÂä°Êï∞: ${avgTasksPerDay}`);
    
    const anomalies = tasksPerDay.filter(row => row.total_tasks === 1);
    if (anomalies.length > 0) {
      console.log('\n‚ö†Ô∏è ÂèëÁé∞ÂºÇÂ∏∏ÔºàÂè™Êúâ1‰∏™‰ªªÂä°ÁöÑÂ∑•‰ΩúÊó•Ôºâ:');
      anomalies.forEach(row => {
        console.log(`  ${row.date}: ${row.task_list}`);
      });
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error);
    process.exit(1);
  }
}

checkTaskDistribution();
